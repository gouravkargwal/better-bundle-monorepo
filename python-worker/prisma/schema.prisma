generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for better data validation
enum ProductStatus {
  active
  archived
  draft
}

enum OrderStatus {
  pending
  confirmed
  paid
  partially_paid
  partially_refunded
  refunded
  voided
  cancelled
}

enum CollectionSortOrder {
  manual
  best_selling
  created
  created_desc
  id
  id_desc
  price
  price_desc
  title
  title_desc
  updated_at
  updated_at_desc
}

model RawOrder {
  id                String    @id @default(cuid())
  shopId            String
  payload           Json
  extractedAt       DateTime  @default(now())
  shopifyId         String?   @db.VarChar(100) // Shopify order ID for efficient lookups
  shopifyCreatedAt  DateTime? // Shopify creation timestamp
  shopifyUpdatedAt  DateTime? // Shopify update timestamp

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@map("RawOrder")
}

model RawProduct {
  id                String    @id @default(cuid())
  shopId            String
  payload           Json
  extractedAt       DateTime  @default(now())
  shopifyId         String?   @db.VarChar(100) // Shopify product ID for efficient lookups
  shopifyCreatedAt  DateTime? // Shopify creation timestamp
  shopifyUpdatedAt  DateTime? // Shopify update timestamp

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@map("RawProduct")
}

model RawCustomer {
  id                String    @id @default(cuid())
  shopId            String
  payload           Json
  extractedAt       DateTime  @default(now())
  shopifyId         String?   @db.VarChar(100) // Shopify customer ID for efficient lookups
  shopifyCreatedAt  DateTime? // Shopify creation timestamp
  shopifyUpdatedAt  DateTime? // Shopify update timestamp

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@map("RawCustomer")
}

model RawCollection {
  id                String    @id @default(cuid())
  shopId            String
  payload           Json
  extractedAt       DateTime  @default(now())
  shopifyId         String?   @db.VarChar(100) // Shopify collection ID for efficient lookups
  shopifyCreatedAt  DateTime? // Shopify creation timestamp
  shopifyUpdatedAt  DateTime? // Shopify update timestamp

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@map("RawCollection")
}

model RawBehavioralEvents {
  id          String   @id @default(cuid())
  shopId      String
  payload     Json
  receivedAt  DateTime @default(now())
  
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@index([shopId, receivedAt])
  @@map("RawBehavioralEvents")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?  @db.VarChar(500)
  expires       DateTime?
  accessToken   String   @db.VarChar(1000)
  userId        BigInt?
  firstName     String?  @db.VarChar(100)
  lastName      String?  @db.VarChar(100)
  email         String?  @db.VarChar(255)
  accountOwner  Boolean   @default(false)
  locale        String?  @db.VarChar(10)
  collaborator  Boolean?
  emailVerified Boolean?
}

model Shop {
  id                 String                   @id @default(cuid())
  shopDomain         String                   @db.VarChar(255) @unique
  accessToken        String                   @db.VarChar(1000)
  planType           String                   @db.VarChar(50) @default("Free")
  currencyCode       String?                  @db.VarChar(10)
  moneyFormat        String?                  @db.VarChar(100)
  isActive           Boolean                  @default(true)
  email              String?                  @db.VarChar(255)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  lastAnalysisAt     DateTime?
  analysisJobs       AnalysisJob[]
  bundleAnalysis     BundleAnalysisResult[]
  heuristicDecisions HeuristicDecision[]
  incrementalLogs    IncrementalAnalysisLog[]
  orderData          OrderData[]
  productData        ProductData[]
  customerData       CustomerData[]
  collectionData     CollectionData[]
  analysisConfig     ShopAnalysisConfig?
  trackedSales       TrackedSale[]
  widgetConfig       WidgetConfiguration?
  widgetEvents       WidgetEvent[]
  trackingEvents     TrackingEvent[]
  shopAnalytics      ShopAnalytics?
  featureComputations FeatureComputation[]
  mlTrainingLogs      MLTrainingLog[]
  billingSubscriptions BillingSubscription[]
  billingCharges    BillingCharge[]
  userFeatures       UserFeatures[]
  productFeatures    ProductFeatures[]
  interactionFeatures InteractionFeatures[]
  productAnalytics   ProductAnalytics[]
  customerAnalytics  CustomerAnalytics[]
  
  // Enhanced feature models
  collectionFeatures        CollectionFeatures[]
  productCollectionFeatures ProductCollectionFeatures[]
  customerBehaviorFeatures  CustomerBehaviorFeatures[]
  advancedMLFeatures        AdvancedMLFeatures?
  collectionAnalytics       CollectionAnalytics?
  customerBehaviorAnalytics CustomerBehaviorAnalytics?
  
  // Behavioral events
  rawBehavioralEvents       RawBehavioralEvents[]
  behavioralEvents          BehavioralEvents[]
}

model OrderData {
  id        String   @id @default(cuid())
  shopId    String
  orderId   String
  orderName String?  @db.VarChar(100) // Shopify order name (e.g., "#1001")
  customerId String? @db.VarChar(100)
  customerEmail String? @db.VarChar(255)
  customerPhone String? @db.VarChar(50)
  totalAmount Float  @default(0.0)
  subtotalAmount Float? @default(0.0)
  totalTaxAmount Float? @default(0.0)
  totalShippingAmount Float? @default(0.0)
  totalRefundedAmount Float? @default(0.0)
  totalOutstandingAmount Float? @default(0.0)
  orderDate  DateTime
  processedAt DateTime?
  cancelledAt DateTime?
  cancelReason String? @db.VarChar(500) @default("")
  orderStatus OrderStatus? @default(pending)
  orderLocale String? @db.VarChar(10) @default("en")
  currencyCode String? @db.VarChar(10) @default("USD")
  presentmentCurrencyCode String? @db.VarChar(10) @default("USD")
  confirmed Boolean @default(false)
  test Boolean @default(false)
  tags Json? @default("[]")
  note String? @db.Text @default("")
  lineItems  Json @default("[]")
  shippingAddress Json? @default("{}")
  billingAddress Json? @default("{}")
  discountApplications Json? @default("[]")
  metafields Json? @default("[]")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, orderId])
  @@index([shopId, orderDate])
  @@index([shopId, customerId])
  @@index([shopId, customerEmail])
  @@index([shopId, orderStatus])
  @@index([shopId, currencyCode])
  @@map("OrderData")
}

model ProductData {
  id        String   @id @default(cuid())
  shopId    String
  productId String
  title     String   @db.VarChar(500)
  handle    String   @db.VarChar(255)
  description String? @db.Text
  descriptionHtml String? @db.Text
  productType String? @db.VarChar(100) @default("")
  vendor    String?  @db.VarChar(255) @default("")
  tags      Json?    @default("[]")
  status    ProductStatus? @default(active)
  totalInventory Int? @default(0)
  price     Float    @default(0.0)
  compareAtPrice Float? @default(0.0)
  inventory Int?     @default(0)
  imageUrl  String?  @db.VarChar(1000)
  imageAlt  String?  @db.VarChar(500)
  productCreatedAt DateTime?
  productUpdatedAt DateTime?
  variants  Json?    @default("[]")
  images    Json?    @default("[]")
  options   Json?    @default("[]")
  collections Json?  @default("[]")
  metafields Json?   @default("[]")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, productType])
  @@index([shopId, vendor])
  @@index([shopId, price])
  @@index([shopId, status])
  @@index([shopId, isActive])
  @@index([shopId, totalInventory])
  @@map("ProductData")
}

model CustomerData {
  id        String   @id @default(cuid())
  shopId    String
  customerId String
  email     String?  @db.VarChar(255)
  firstName String?  @db.VarChar(100)
  lastName  String?  @db.VarChar(100)
  totalSpent Float   @default(0.0)
  orderCount Int     @default(0)
  lastOrderDate DateTime?
  tags      Json?    @default("[]")
  createdAtShopify DateTime?
  lastOrderId String? @db.VarChar(100)
  location Json?     @default("{}")
  metafields Json?   @default("[]")
  state String?      @db.VarChar(50) @default("")
  verifiedEmail Boolean @default(false)
  taxExempt Boolean @default(false)
  defaultAddress Json? @default("{}")
  addresses Json?    @default("[]")
  currencyCode String? @db.VarChar(10) @default("USD")
  customerLocale String? @db.VarChar(10) @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, email])
  @@index([shopId, totalSpent])
  @@index([shopId, lastOrderDate])
  @@index([shopId, state])
  @@index([shopId, verifiedEmail])
  @@map("CustomerData")
}

model CollectionData {
  id              String   @id @default(cuid())
  shopId          String
  collectionId    String
  title           String   @db.VarChar(500)
  handle          String   @db.VarChar(255)
  description     String?  @db.Text @default("")
  sortOrder       CollectionSortOrder? @default(manual)
  templateSuffix  String?  @db.VarChar(100) @default("")
  seoTitle        String?  @db.VarChar(500) @default("")
  seoDescription  String?  @db.Text @default("")
  imageUrl        String?  @db.VarChar(1000)
  imageAlt        String?  @db.VarChar(500)
  productCount    Int      @default(0)
  isAutomated     Boolean  @default(false)
  metafields      Json?    @default("[]")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, title])
  @@index([shopId, handle])
  @@index([shopId, isAutomated])
  @@map("CollectionData")
}


model BundleAnalysisResult {
  id              String   @id @default(cuid())
  shopId          String
  productIds      String[]
  bundleSize      Int
  coPurchaseCount Int
  confidence      Float
  lift            Float
  support         Float
  revenue         Float
  avgOrderValue   Float
  analysisDate    DateTime @default(now())
  isActive        Boolean  @default(true)
  discount        Float    @default(0)
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productIds])
  @@index([shopId, confidence])
  @@index([shopId, lift])
  @@index([shopId, revenue])
  @@index([shopId, isActive])
  @@index([shopId, bundleSize])
  @@index([shopId, analysisDate])
  @@map("BundleAnalysisResult")
}

model TrackedSale {
  id               String   @id @default(cuid())
  shopId           String
  shopifyOrderId   String
  revenueGenerated Float
  commissionOwed   Float
  status           String   @default("pending")
  billingPeriod    String?  @db.VarChar(50)
  createdAt        DateTime @default(now())
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, shopifyOrderId])
  @@index([shopId, billingPeriod])
  @@index([shopId, status])
  @@map("TrackedSale")
}

model WidgetEvent {
  id         String   @id @default(cuid())
  shopId     String
  sessionId  String
  bundleId   String?  @db.VarChar(100)
  action     String
  productIds String[]
  timestamp  DateTime @default(now())
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, sessionId])
  @@index([shopId, action])
  @@index([shopId, timestamp])
  @@map("WidgetEvent")
}

model WidgetConfiguration {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  isEnabled             Boolean  @default(false)
  theme                 String   @default("auto")
  position              String   @default("product_page")
  title                 String   @default("Frequently Bought Together")
  showImages            Boolean  @default(true)
  showIndividualButtons Boolean  @default(true)
  showBundleTotal       Boolean  @default(true)
  globalDiscount        Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  @@map("WidgetConfiguration")
}

model AnalysisJob {
  id          String    @id @default(cuid())
  shopId      String
  status      String    @default("pending")
  jobId       String    @unique
  progress    Int       @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?  @db.Text
  result      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
  @@map("AnalysisJob")
}

model ShopAnalysisConfig {
  id               String   @id @default(cuid())
  shopId           String   @unique
  similarityConfig Json?
  bundleConfig     Json?
  isEnabled        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model HeuristicDecision {
  id                    String   @id @default(cuid())
  shopId                String
  decision              String   @db.VarChar(500) // Human-readable decision
  reason                String   @db.Text // Detailed reasoning
  nextAnalysisHours     Int      // Next analysis interval in hours
  confidence            Float    // Confidence score (0.0 to 1.0)
  
  // Key heuristic factors as individual fields
  orderVolume           Float    // Orders per day
  revenueVelocity       Float    // Revenue per day
  bundleEffectiveness   Float    // Bundle performance score (0.0 to 1.0)
  dataChangeRate        Float    // Data change percentage
  shopActivityLevel     String   @db.VarChar(20) // 'low', 'medium', 'high'
  userEngagement        Float    // User engagement score (0.0 to 1.0)
  
  // Additional metadata
  reasoningSummary      String?  @db.Text // Summary of reasoning
  analysisTimestamp     DateTime @default(now())
  createdAt             DateTime @default(now())
  
  // Relations
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, decision])
  @@index([shopId, createdAt])
  @@index([nextAnalysisHours])
  @@index([confidence])
  @@map("HeuristicDecision")
}

model IncrementalAnalysisLog {
  id        String   @id @default(cuid())
  shopId    String
  jobId     String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, jobId])
  @@index([shopId, action])
  @@index([shopId, createdAt])
}

// New tracking models
model TrackingEvent {
  id          String   @id @default(cuid())
  shopId      String
  eventType   String   @db.VarChar(100) // "recommendation_displayed", "recommendation_clicked", etc.
  sessionId   String   @db.VarChar(100)
  trackingId  String   @db.VarChar(100)
  userId      String?  @db.VarChar(100)
  timestamp   DateTime
  metadata    Json
  rawEvent    Json
  createdAt   DateTime @default(now())

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])

  @@index([shopId, eventType])
  @@index([sessionId])
  @@index([trackingId])
  @@index([timestamp])
  @@index([userId])
}

model ShopAnalytics {
  id              String   @id @default(cuid())
  shopId          String   @unique
  totalOrders     Int      @default(0)
  totalRevenue    Float    @default(0)
  avgOrderValue   Float    @default(0)
  topProducts     Json?    // Top 10 products by quantity
  topCategories   Json?    // Top categories by revenue
  lastComputedAt  DateTime @default(now())
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, totalRevenue])
  @@index([shopId, totalOrders])
  @@map("ShopAnalytics")
}

// Billing models
model BillingSubscription {
  id                String   @id @default(cuid())
  shopId            String
  planName          String   @db.VarChar(100)
  status            String   @db.VarChar(50) // "active", "cancelled", "declined", "frozen"
  trialDays         Int      @default(14)
  currentPeriodEnd  DateTime
  nextBillingDate   DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  charges BillingCharge[]

  @@index([shopId, status])
  @@index([status, nextBillingDate])
}

model BillingCharge {
  id            String   @id @default(cuid())
  shopId        String
  subscriptionId String
  amount        Float
  currency      String   @db.VarChar(10) @default("USD")
  description   String   @db.VarChar(500)
  billingPeriod String   @db.VarChar(50)
  status        String   @db.VarChar(50) // "pending", "active", "cancelled", "declined"
  createdAt     DateTime @default(now())
  dueDate       DateTime
  paidAt        DateTime?

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  subscription BillingSubscription @relation(fields: [subscriptionId], references: [id])

  @@index([shopId, status])
  @@index([subscriptionId])
  @@index([billingPeriod])
  @@index([dueDate])
}

// ML Training Logs - Simple and Clean
model MLTrainingLog {
  id          String   @id @default(cuid())
  shopId      String
  status      String   @default("started") // "started", "completed", "failed", "skipped"
  startedAt   DateTime @default(now())
  completedAt DateTime?
  durationMs  Int?     // Training duration in milliseconds
  productsCount Int    @default(0)
  usersCount   Int     @default(0)
  collectionsCount Int @default(0)
  customerEventsCount Int @default(0)
  error       String?  @db.Text
  createdAt   DateTime @default(now())
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
  @@map("MLTrainingLog")
}



model FeatureComputation {
  id          String   @id @default(cuid())
  shopId      String
  jobId       String
  status      String   @default("pending") // "pending", "computing", "completed", "failed"
  featureCount Int     @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())
  completedAt DateTime?
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@map("FeatureComputation")
}

model UserFeatures {
  id                      String   @id @default(cuid())
  shopId                  String
  customerId              String
  totalPurchases          Int      @default(0)
  recencyDays             Int?
  avgPurchaseIntervalDays  Float?
  totalSpent              Float    @default(0)
  preferredCategory       String?  @db.VarChar(100)
  lastComputedAt          DateTime @default(now())
  shop                    Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, totalSpent])
  @@index([shopId, recencyDays])
  @@map("UserFeatures")
}

model ProductFeatures {
  id              String   @id @default(cuid())
  shopId          String
  productId       String
  popularity      Int      @default(0)
  avgRating       Float?
  priceTier       String?  @db.VarChar(20) // "low", "mid", "high"
  category        String?  @db.VarChar(100)
  tags            Json?
  lastComputedAt  DateTime @default(now())
  
  // Enhanced features for ML training
  variantComplexity    Float?  // 0-1 normalized score
  imageRichness        Float?  // 0-1 normalized score
  tagDiversity         Float?  // 0-1 normalized score
  metafieldUtilization Float?  // 0-1 normalized score
  categoryEncoded      Int?    // 0 or 1 for ML
  vendorScore          Int?    // 0 or 1 for ML
  
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, popularity])
  @@index([shopId, priceTier])
  @@index([shopId, category])
  @@index([shopId, variantComplexity])
  @@index([shopId, imageRichness])
  @@index([shopId, tagDiversity])
  @@map("ProductFeatures")
}

model CollectionFeatures {
  id                    String   @id @default(cuid())
  shopId                String
  collectionId          String
  productCount          Int      @default(0)
  isAutomated           Boolean  @default(false)
  performanceScore      Float    @default(0)
  seoScore              Int      @default(0)
  imageScore            Int      @default(0)
  lastComputedAt        DateTime @default(now())
  
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, productCount])
  @@index([shopId, isAutomated])
  @@index([shopId, performanceScore])
  @@map("CollectionFeatures")
}

model ProductCollectionFeatures {
  id                      String   @id @default(cuid())
  shopId                  String
  productId               String
  collectionCount         Int      @default(0)
  collectionQualityScore  Float    @default(0)  // 0-1 normalized score
  crossCollectionScore    Float    @default(0)  // 0-1 normalized score
  isInManualCollections   Boolean  @default(false)
  isInAutomatedCollections Boolean @default(false)
  lastComputedAt          DateTime @default(now())
  
  shop                    Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, collectionCount])
  @@index([shopId, collectionQualityScore])
  @@index([shopId, crossCollectionScore])
  @@map("ProductCollectionFeatures")
}

model CustomerBehaviorFeatures {
  id                    String   @id @default(cuid())
  shopId                String
  customerId            String
  eventDiversity        Int      @default(0)
  eventFrequency        Int      @default(0)
  daysSinceFirstEvent   Int      @default(0)
  daysSinceLastEvent    Int      @default(0)
  purchaseFrequency     Int      @default(0)
  topCategories         Json?    // Top 3 preferred categories
  engagementScore       Float    @default(0)  // 0-1 normalized score
  recencyScore          Float    @default(0)  // 0-1 normalized score
  diversityScore        Float    @default(0)  // 0-1 normalized score
  behavioralScore       Float    @default(0)  // Combined behavioral score
  lastComputedAt        DateTime @default(now())
  
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, engagementScore])
  @@index([shopId, recencyScore])
  @@index([shopId, behavioralScore])
  @@index([shopId, daysSinceLastEvent])
  @@map("CustomerBehaviorFeatures")
}

model AdvancedMLFeatures {
  id                    String   @id @default(cuid())
  shopId                String
  
  // Time-based patterns
  monthlyPatterns       Json?    // Monthly revenue/order patterns
  dailyPatterns         Json?    // Day-of-week patterns
  hourlyPatterns        Json?    // Hourly patterns
  
  // Customer segmentation
  customerSegments      Json?    // High-value, frequent, recent, lapsed
  
  // Product relationships
  productSimilarities   Json?    // Co-purchase similarity matrix
  crossSellingOpportunities Json? // Frequent product combinations
  
  // Category and price analysis
  categoryPerformance   Json?    // Category revenue/quantity analysis
  priceElasticity       Json?    // Price range performance
  
  // Analytics summary
  totalSegments         Int      @default(0)
  totalSimilarities     Int      @default(0)
  totalOpportunities    Int      @default(0)
  lastComputedAt        DateTime @default(now())
  
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId])
  @@index([shopId, lastComputedAt])
  @@map("AdvancedMLFeatures")
}

model CollectionAnalytics {
  id                        String   @id @default(cuid())
  shopId                    String
  
  // Collection counts
  totalCollections          Int      @default(0)
  manualCollections         Int      @default(0)
  automatedCollections      Int      @default(0)
  
  // Performance metrics
  avgProductsPerCollection  Float    @default(0)
  collectionAutomationRatio Float    @default(0)
  
  // Top collections
  topCollectionsByProducts  Json?    // Top 10 collections by product count
  topCollectionsByRevenue   Json?    // Top 10 collections by revenue
  
  lastComputedAt            DateTime @default(now())
  
  shop                      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId])
  @@index([shopId, totalCollections])
  @@index([shopId, collectionAutomationRatio])
  @@map("CollectionAnalytics")
}

model CustomerBehaviorAnalytics {
  id                        String   @id @default(cuid())
  shopId                    String
  
  // Customer counts
  totalCustomersWithBehavior Int     @default(0)
  highEngagementCustomers    Int     @default(0)
  activeCustomers            Int     @default(0)
  
  // Average scores
  avgEngagementScore         Float   @default(0)
  avgRecencyScore           Float   @default(0)
  avgDiversityScore         Float   @default(0)
  
  // Behavioral distribution
  engagementDistribution     Json?   // Distribution of engagement scores
  recencyDistribution        Json?   // Distribution of recency scores
  
  lastComputedAt            DateTime @default(now())
  
  shop                      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId])
  @@index([shopId, totalCustomersWithBehavior])
  @@index([shopId, avgEngagementScore])
  @@map("CustomerBehaviorAnalytics")
}

model InteractionFeatures {
  id                  String   @id @default(cuid())
  shopId              String
  customerId          String
  productId           String
  purchaseCount       Int      @default(0)
  lastPurchaseDate    DateTime?
  timeDecayedWeight   Float?
  lastComputedAt      DateTime @default(now())
  shop                Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId, productId])
  @@index([shopId, customerId])
  @@index([shopId, productId])
  @@index([shopId, timeDecayedWeight])
  @@map("InteractionFeatures")
}

model ProductAnalytics {
  id              String   @id @default(cuid())
  shopId          String
  productId       String
  viewCount       Int      @default(0)
  addToCartCount  Int      @default(0)
  purchaseCount   Int      @default(0)
  revenue         Float    @default(0)
  avgOrderValue   Float    @default(0)
  lastViewedAt    DateTime?
  lastPurchasedAt DateTime?
  lastComputedAt  DateTime @default(now())
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, viewCount])
  @@index([shopId, purchaseCount])
  @@index([shopId, revenue])
  @@index([shopId, lastViewedAt])
  @@map("ProductAnalytics")
}

model CustomerAnalytics {
  id                    String   @id @default(cuid())
  shopId                String
  customerId            String
  totalSessions         Int      @default(0)
  totalPageViews        Int      @default(0)
  totalSearchQueries    Int      @default(0)
  cartAbandonmentRate   Float    @default(0)
  avgSessionDuration    Float    @default(0)
  lastActivityAt        DateTime?
  preferredCategories   Json?
  lastComputedAt        DateTime @default(now())
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, totalSessions])
  @@index([shopId, lastActivityAt])
  @@map("CustomerAnalytics")
}

// Behavioral Events Tables


model BehavioralEvents {
  eventId     String   @id
  shopId      String
  customerId  String?  @db.VarChar(100)
  eventType   String   @db.VarChar(100)
  occurredAt  DateTime
  eventData   Json?
  
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, eventType])
  @@index([shopId, occurredAt])
  @@index([shopId, customerId])
  @@map("BehavioralEvents")
}
