generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawOrder {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawOrder")
}

model RawProduct {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawProduct")
}

model RawCustomer {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawCustomer")
}

model RawCollection {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawCollection")
}

model RawCustomerEvent {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawCustomerEvent")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?
  emailVerified Boolean?
}

model Shop {
  id                 String                   @id @default(cuid())
  shopDomain         String                   @unique
  accessToken        String
  planType           String                   @default("Free")
  currencyCode       String?
  moneyFormat        String?
  isActive           Boolean                  @default(true)
  email              String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  lastAnalysisAt     DateTime?
  analysisJobs       AnalysisJob[]
  bundleAnalysis     BundleAnalysisResult[]
  heuristicDecisions HeuristicDecision[]
  incrementalLogs    IncrementalAnalysisLog[]
  orderData          OrderData[]
  productData        ProductData[]
  customerData       CustomerData[]
  collectionData     CollectionData[]
  customerEventData  CustomerEventData[]
  analysisConfig     ShopAnalysisConfig?
  trackedSales       TrackedSale[]
  widgetConfig       WidgetConfiguration?
  widgetEvents       WidgetEvent[]
  trackingEvents     TrackingEvent[]
  shopAnalytics      ShopAnalytics?
  featureComputations FeatureComputation[]
  mlTrainingLogs      MLTrainingLog[]
  billingSubscriptions BillingSubscription[]
  billingCharges    BillingCharge[]
  userFeatures       UserFeatures[]
  productFeatures    ProductFeatures[]
  interactionFeatures InteractionFeatures[]
  productAnalytics   ProductAnalytics[]
  customerAnalytics  CustomerAnalytics[]
  
  // Enhanced feature models
  collectionFeatures        CollectionFeatures[]
  productCollectionFeatures ProductCollectionFeatures[]
  customerBehaviorFeatures  CustomerBehaviorFeatures[]
  advancedMLFeatures        AdvancedMLFeatures?
  collectionAnalytics       CollectionAnalytics?
  customerBehaviorAnalytics CustomerBehaviorAnalytics?
}

model OrderData {
  id        String   @id @default(cuid())
  shopId    String
  orderId   String
  orderName String?  // Shopify order name (e.g., "#1001")
  customerId String?
  customerEmail String?
  customerPhone String?
  totalAmount Float
  subtotalAmount Float?
  totalTaxAmount Float?
  totalShippingAmount Float?
  totalRefundedAmount Float?
  totalOutstandingAmount Float?
  orderDate  DateTime
  processedAt DateTime?
  cancelledAt DateTime?
  cancelReason String?
  orderStatus String?
  orderLocale String?
  currencyCode String?
  presentmentCurrencyCode String?
  confirmed Boolean @default(false)
  test Boolean @default(false)
  tags Json?
  note String?
  lineItems  Json
  shippingAddress Json?
  billingAddress Json?
  discountApplications Json?
  metafields Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, orderId])
  @@index([shopId, orderDate])
  @@index([shopId, customerId])
  @@index([shopId, customerEmail])
  @@index([shopId, orderStatus])
  @@index([shopId, currencyCode])
  @@map("OrderData")
}

model ProductData {
  id        String   @id @default(cuid())
  shopId    String
  productId String
  title     String
  handle    String
  description String?
  descriptionHtml String?
  productType String?
  vendor    String?
  tags      Json?
  status    String?
  totalInventory Int?
  price     Float
  compareAtPrice Float?
  inventory Int?
  imageUrl  String?
  imageAlt  String?
  productCreatedAt DateTime?
  productUpdatedAt DateTime?
  variants  Json?
  images    Json?
  options   Json?
  collections Json?
  metafields Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, productType])
  @@index([shopId, vendor])
  @@index([shopId, price])
  @@index([shopId, status])
  @@index([shopId, isActive])
  @@index([shopId, totalInventory])
  @@map("ProductData")
}

model CustomerData {
  id        String   @id @default(cuid())
  shopId    String
  customerId String
  email     String?
  firstName String?
  lastName  String?
  totalSpent Float   @default(0)
  orderCount Int     @default(0)
  lastOrderDate DateTime?
  tags      Json?
  createdAtShopify DateTime?
  lastOrderId String?
  location Json?
  metafields Json?
  state String?
  verifiedEmail Boolean @default(false)
  taxExempt Boolean @default(false)
  defaultAddress Json?
  addresses Json?
  currencyCode String?
  customerLocale String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, email])
  @@index([shopId, totalSpent])
  @@index([shopId, lastOrderDate])
  @@index([shopId, state])
  @@index([shopId, verifiedEmail])
  @@map("CustomerData")
}

model CollectionData {
  id              String   @id @default(cuid())
  shopId          String
  collectionId    String
  title           String
  handle          String
  description     String?
  sortOrder       String?
  templateSuffix  String?
  seoTitle        String?
  seoDescription  String?
  imageUrl        String?
  imageAlt        String?
  productCount    Int      @default(0)
  isAutomated     Boolean  @default(false)
  metafields      Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, title])
  @@index([shopId, handle])
  @@index([shopId, isAutomated])
  @@map("CollectionData")
}

model CustomerEventData {
  id                  String   @id @default(cuid())
  shopId              String
  customerId          String
  eventId             String
  eventType           String
  customerEmail       String?
  customerFirstName   String?
  customerLastName    String?
  customerTags        Json?
  customerState       String?
  customerOrdersCount Int      @default(0)
  customerAmountSpent Float    @default(0)
  customerCurrency    String   @default("USD")
  eventTimestamp      DateTime @default(now())
  rawEventData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  shop                Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, eventId])
  @@index([shopId, customerId])
  @@index([shopId, eventType])
  @@index([shopId, eventTimestamp])
  @@index([shopId, customerEmail])
  @@map("CustomerEventData")
}

model BundleAnalysisResult {
  id              String   @id @default(cuid())
  shopId          String
  productIds      String[]
  bundleSize      Int
  coPurchaseCount Int
  confidence      Float
  lift            Float
  support         Float
  revenue         Float
  avgOrderValue   Float
  analysisDate    DateTime @default(now())
  isActive        Boolean  @default(true)
  discount        Float    @default(0)
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productIds])
  @@index([shopId, confidence])
  @@index([shopId, lift])
  @@index([shopId, revenue])
  @@index([shopId, isActive])
  @@index([shopId, bundleSize])
  @@index([shopId, analysisDate])
  @@map("BundleAnalysisResult")
}

model TrackedSale {
  id               String   @id @default(cuid())
  shopId           String
  shopifyOrderId   String
  revenueGenerated Float
  commissionOwed   Float
  status           String   @default("pending")
  billingPeriod    String?
  createdAt        DateTime @default(now())
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, shopifyOrderId])
  @@index([shopId, billingPeriod])
  @@index([shopId, status])
  @@map("TrackedSale")
}

model WidgetEvent {
  id         String   @id @default(cuid())
  shopId     String
  sessionId  String
  bundleId   String?
  action     String
  productIds String[]
  timestamp  DateTime @default(now())
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, sessionId])
  @@index([shopId, action])
  @@index([shopId, timestamp])
  @@map("WidgetEvent")
}

model WidgetConfiguration {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  isEnabled             Boolean  @default(false)
  theme                 String   @default("auto")
  position              String   @default("product_page")
  title                 String   @default("Frequently Bought Together")
  showImages            Boolean  @default(true)
  showIndividualButtons Boolean  @default(true)
  showBundleTotal       Boolean  @default(true)
  globalDiscount        Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  @@map("WidgetConfiguration")
}

model AnalysisJob {
  id          String    @id @default(cuid())
  shopId      String
  status      String    @default("pending")
  jobId       String    @unique
  progress    Int       @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  result      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
  @@map("AnalysisJob")
}

model ShopAnalysisConfig {
  id               String   @id @default(cuid())
  shopId           String   @unique
  similarityConfig Json?
  bundleConfig     Json?
  isEnabled        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model HeuristicDecision {
  id                    String   @id @default(cuid())
  shopId                String
  decision              String   // Human-readable decision
  reason                String   // Detailed reasoning
  nextAnalysisHours     Int      // Next analysis interval in hours
  confidence            Float    // Confidence score (0.0 to 1.0)
  
  // Key heuristic factors as individual fields
  orderVolume           Float    // Orders per day
  revenueVelocity       Float    // Revenue per day
  bundleEffectiveness   Float    // Bundle performance score (0.0 to 1.0)
  dataChangeRate        Float    // Data change percentage
  shopActivityLevel     String   // 'low', 'medium', 'high'
  userEngagement        Float    // User engagement score (0.0 to 1.0)
  
  // Additional metadata
  reasoningSummary      String?  // Summary of reasoning
  analysisTimestamp     DateTime @default(now())
  createdAt             DateTime @default(now())
  
  // Relations
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, decision])
  @@index([shopId, createdAt])
  @@index([nextAnalysisHours])
  @@index([confidence])
  @@map("HeuristicDecision")
}

model IncrementalAnalysisLog {
  id        String   @id @default(cuid())
  shopId    String
  jobId     String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, jobId])
  @@index([shopId, action])
  @@index([shopId, createdAt])
}

// New tracking models
model TrackingEvent {
  id          String   @id @default(cuid())
  shopId      String
  eventType   String   // "recommendation_displayed", "recommendation_clicked", etc.
  sessionId   String
  trackingId  String
  userId      String?
  timestamp   DateTime
  metadata    Json
  rawEvent    Json
  createdAt   DateTime @default(now())

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])

  @@index([shopId, eventType])
  @@index([sessionId])
  @@index([trackingId])
  @@index([timestamp])
  @@index([userId])
}

model ShopAnalytics {
  id              String   @id @default(cuid())
  shopId          String   @unique
  totalOrders     Int      @default(0)
  totalRevenue    Float    @default(0)
  avgOrderValue   Float    @default(0)
  topProducts     Json?    // Top 10 products by quantity
  topCategories   Json?    // Top categories by revenue
  lastComputedAt  DateTime @default(now())
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, totalRevenue])
  @@index([shopId, totalOrders])
  @@map("ShopAnalytics")
}

// Billing models
model BillingSubscription {
  id                String   @id @default(cuid())
  shopId            String
  planName          String
  status            String   // "active", "cancelled", "declined", "frozen"
  trialDays         Int      @default(14)
  currentPeriodEnd  DateTime
  nextBillingDate   DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  charges BillingCharge[]

  @@index([shopId, status])
  @@index([status, nextBillingDate])
}

model BillingCharge {
  id            String   @id @default(cuid())
  shopId        String
  subscriptionId String
  amount        Float
  currency      String   @default("USD")
  description   String
  billingPeriod String
  status        String   // "pending", "active", "cancelled", "declined"
  createdAt     DateTime @default(now())
  dueDate       DateTime
  paidAt        DateTime?

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  subscription BillingSubscription @relation(fields: [subscriptionId], references: [id])

  @@index([shopId, status])
  @@index([subscriptionId])
  @@index([billingPeriod])
  @@index([dueDate])
}

// ML Training Logs - Simple and Clean
model MLTrainingLog {
  id          String   @id @default(cuid())
  shopId      String
  status      String   @default("started") // "started", "completed", "failed", "skipped"
  startedAt   DateTime @default(now())
  completedAt DateTime?
  durationMs  Int?     // Training duration in milliseconds
  productsCount Int    @default(0)
  usersCount   Int     @default(0)
  collectionsCount Int @default(0)
  customerEventsCount Int @default(0)
  error       String?
  createdAt   DateTime @default(now())
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
  @@map("MLTrainingLog")
}



model FeatureComputation {
  id          String   @id @default(cuid())
  shopId      String
  jobId       String
  status      String   @default("pending") // "pending", "computing", "completed", "failed"
  featureCount Int     @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())
  completedAt DateTime?
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@map("FeatureComputation")
}

model UserFeatures {
  id                      String   @id @default(cuid())
  shopId                  String
  customerId              String
  totalPurchases          Int      @default(0)
  recencyDays             Int?
  avgPurchaseIntervalDays  Float?
  totalSpent              Float    @default(0)
  preferredCategory       String?
  lastComputedAt          DateTime @default(now())
  shop                    Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, totalSpent])
  @@index([shopId, recencyDays])
  @@map("UserFeatures")
}

model ProductFeatures {
  id              String   @id @default(cuid())
  shopId          String
  productId       String
  popularity      Int      @default(0)
  avgRating       Float?
  priceTier       String?  // "low", "mid", "high"
  category        String?
  tags            Json?
  lastComputedAt  DateTime @default(now())
  
  // Enhanced features for ML training
  variantComplexity    Float?  // 0-1 normalized score
  imageRichness        Float?  // 0-1 normalized score
  tagDiversity         Float?  // 0-1 normalized score
  metafieldUtilization Float?  // 0-1 normalized score
  categoryEncoded      Int?    // 0 or 1 for ML
  vendorScore          Int?    // 0 or 1 for ML
  
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, popularity])
  @@index([shopId, priceTier])
  @@index([shopId, category])
  @@index([shopId, variantComplexity])
  @@index([shopId, imageRichness])
  @@index([shopId, tagDiversity])
  @@map("ProductFeatures")
}

model CollectionFeatures {
  id                    String   @id @default(cuid())
  shopId                String
  collectionId          String
  productCount          Int      @default(0)
  isAutomated           Boolean  @default(false)
  performanceScore      Float    @default(0)
  seoScore              Int      @default(0)
  imageScore            Int      @default(0)
  lastComputedAt        DateTime @default(now())
  
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, productCount])
  @@index([shopId, isAutomated])
  @@index([shopId, performanceScore])
  @@map("CollectionFeatures")
}

model ProductCollectionFeatures {
  id                      String   @id @default(cuid())
  shopId                  String
  productId               String
  collectionCount         Int      @default(0)
  collectionQualityScore  Float    @default(0)  // 0-1 normalized score
  crossCollectionScore    Float    @default(0)  // 0-1 normalized score
  isInManualCollections   Boolean  @default(false)
  isInAutomatedCollections Boolean @default(false)
  lastComputedAt          DateTime @default(now())
  
  shop                    Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, collectionCount])
  @@index([shopId, collectionQualityScore])
  @@index([shopId, crossCollectionScore])
  @@map("ProductCollectionFeatures")
}

model CustomerBehaviorFeatures {
  id                    String   @id @default(cuid())
  shopId                String
  customerId            String
  eventDiversity        Int      @default(0)
  eventFrequency        Int      @default(0)
  daysSinceFirstEvent   Int      @default(0)
  daysSinceLastEvent    Int      @default(0)
  purchaseFrequency     Int      @default(0)
  topCategories         Json?    // Top 3 preferred categories
  engagementScore       Float    @default(0)  // 0-1 normalized score
  recencyScore          Float    @default(0)  // 0-1 normalized score
  diversityScore        Float    @default(0)  // 0-1 normalized score
  behavioralScore       Float    @default(0)  // Combined behavioral score
  lastComputedAt        DateTime @default(now())
  
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, engagementScore])
  @@index([shopId, recencyScore])
  @@index([shopId, behavioralScore])
  @@index([shopId, daysSinceLastEvent])
  @@map("CustomerBehaviorFeatures")
}

model AdvancedMLFeatures {
  id                    String   @id @default(cuid())
  shopId                String
  
  // Time-based patterns
  monthlyPatterns       Json?    // Monthly revenue/order patterns
  dailyPatterns         Json?    // Day-of-week patterns
  hourlyPatterns        Json?    // Hourly patterns
  
  // Customer segmentation
  customerSegments      Json?    // High-value, frequent, recent, lapsed
  
  // Product relationships
  productSimilarities   Json?    // Co-purchase similarity matrix
  crossSellingOpportunities Json? // Frequent product combinations
  
  // Category and price analysis
  categoryPerformance   Json?    // Category revenue/quantity analysis
  priceElasticity       Json?    // Price range performance
  
  // Analytics summary
  totalSegments         Int      @default(0)
  totalSimilarities     Int      @default(0)
  totalOpportunities    Int      @default(0)
  lastComputedAt        DateTime @default(now())
  
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId])
  @@index([shopId, lastComputedAt])
  @@map("AdvancedMLFeatures")
}

model CollectionAnalytics {
  id                        String   @id @default(cuid())
  shopId                    String
  
  // Collection counts
  totalCollections          Int      @default(0)
  manualCollections         Int      @default(0)
  automatedCollections      Int      @default(0)
  
  // Performance metrics
  avgProductsPerCollection  Float    @default(0)
  collectionAutomationRatio Float    @default(0)
  
  // Top collections
  topCollectionsByProducts  Json?    // Top 10 collections by product count
  topCollectionsByRevenue   Json?    // Top 10 collections by revenue
  
  lastComputedAt            DateTime @default(now())
  
  shop                      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId])
  @@index([shopId, totalCollections])
  @@index([shopId, collectionAutomationRatio])
  @@map("CollectionAnalytics")
}

model CustomerBehaviorAnalytics {
  id                        String   @id @default(cuid())
  shopId                    String
  
  // Customer counts
  totalCustomersWithBehavior Int     @default(0)
  highEngagementCustomers    Int     @default(0)
  activeCustomers            Int     @default(0)
  
  // Average scores
  avgEngagementScore         Float   @default(0)
  avgRecencyScore           Float   @default(0)
  avgDiversityScore         Float   @default(0)
  
  // Behavioral distribution
  engagementDistribution     Json?   // Distribution of engagement scores
  recencyDistribution        Json?   // Distribution of recency scores
  
  lastComputedAt            DateTime @default(now())
  
  shop                      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId])
  @@index([shopId, totalCustomersWithBehavior])
  @@index([shopId, avgEngagementScore])
  @@map("CustomerBehaviorAnalytics")
}

model InteractionFeatures {
  id                  String   @id @default(cuid())
  shopId              String
  customerId          String
  productId           String
  purchaseCount       Int      @default(0)
  lastPurchaseDate    DateTime?
  timeDecayedWeight   Float?
  lastComputedAt      DateTime @default(now())
  shop                Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId, productId])
  @@index([shopId, customerId])
  @@index([shopId, productId])
  @@index([shopId, timeDecayedWeight])
  @@map("InteractionFeatures")
}

model ProductAnalytics {
  id              String   @id @default(cuid())
  shopId          String
  productId       String
  viewCount       Int      @default(0)
  addToCartCount  Int      @default(0)
  purchaseCount   Int      @default(0)
  revenue         Float    @default(0)
  avgOrderValue   Float    @default(0)
  lastViewedAt    DateTime?
  lastPurchasedAt DateTime?
  lastComputedAt  DateTime @default(now())
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, viewCount])
  @@index([shopId, purchaseCount])
  @@index([shopId, revenue])
  @@index([shopId, lastViewedAt])
  @@map("ProductAnalytics")
}

model CustomerAnalytics {
  id                    String   @id @default(cuid())
  shopId                String
  customerId            String
  totalSessions         Int      @default(0)
  totalPageViews        Int      @default(0)
  totalSearchQueries    Int      @default(0)
  cartAbandonmentRate   Float    @default(0)
  avgSessionDuration    Float    @default(0)
  lastActivityAt        DateTime?
  preferredCategories   Json?
  lastComputedAt        DateTime @default(now())
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, totalSessions])
  @@index([shopId, lastActivityAt])
  @@map("CustomerAnalytics")
}
