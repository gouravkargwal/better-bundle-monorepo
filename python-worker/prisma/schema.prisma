generator client {
  provider                    = "prisma-client-py"
  enable_experimental_decimal = "true"
  recursive_type_depth        = "5"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RawSourceType {
  webhook
  backfill
}

enum RawDataFormat {
  rest
  graphql
}

model RawOrder {
  id               String         @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime       @default(now())
  shopifyId        String?        @db.VarChar(100)
  shopifyCreatedAt DateTime?
  shopifyUpdatedAt DateTime?
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?      @default(now())

  @@unique([shopId, shopifyId], name: "shopId_shopifyId")
  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawOrder")
}

model RawProduct {
  id               String         @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime       @default(now())
  shopifyId        String?        @db.VarChar(100)
  shopifyCreatedAt DateTime?
  shopifyUpdatedAt DateTime?
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?      @default(now())

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawProduct")
}

model RawCustomer {
  id               String         @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime       @default(now())
  shopifyId        String?        @db.VarChar(100)
  shopifyCreatedAt DateTime?
  shopifyUpdatedAt DateTime?
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?      @default(now())

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawCustomer")
}

model RawCollection {
  id               String         @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime       @default(now())
  shopifyId        String?        @db.VarChar(100)
  shopifyCreatedAt DateTime?
  shopifyUpdatedAt DateTime?
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?      @default(now())

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawCollection")
}

model NormalizationWatermark {
  id               String   @id @default(cuid())
  shopId           String
  dataType         String   @db.VarChar(50)
  lastNormalizedAt DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([shopId, dataType])
  @@index([shopId])
  @@map("NormalizationWatermark")
}

model OrderData {
  id                      String         @id @default(cuid())
  shopId                  String
  orderId                 String
  orderName               String?        @db.VarChar(100)
  customerId              String?        @db.VarChar(100)
  customerEmail           String?        @db.VarChar(255)
  customerPhone           String?        @db.VarChar(50)
  customerDisplayName     String?        @db.VarChar(255)
  customerState           String?        @db.VarChar(50)
  customerVerifiedEmail   Boolean?       @default(false)
  customerCreatedAt       DateTime?
  customerUpdatedAt       DateTime?
  customerDefaultAddress  Json?          @default("{}")
  totalAmount             Float          @default(0.0)
  subtotalAmount          Float?         @default(0.0)
  totalTaxAmount          Float?         @default(0.0)
  totalShippingAmount     Float?         @default(0.0)
  totalRefundedAmount     Float?         @default(0.0)
  totalOutstandingAmount  Float?         @default(0.0)
  orderDate               DateTime
  processedAt             DateTime?
  cancelledAt             DateTime?
  cancelReason            String?        @default("") @db.VarChar(500)
  orderLocale             String?        @default("en") @db.VarChar(10)
  currencyCode            String?        @default("USD") @db.VarChar(10)
  presentmentCurrencyCode String?        @default("USD") @db.VarChar(10)
  confirmed               Boolean        @default(false)
  test                    Boolean        @default(false)
  financialStatus         String?        @db.VarChar(50)
  fulfillmentStatus       String?        @db.VarChar(50)
  orderStatus             String?        @db.VarChar(50)
  tags                    Json?          @default("[]")
  note                    String?        @default("")
  noteAttributes          Json?          @default("[]")
  shippingAddress         Json?          @default("{}")
  billingAddress          Json?          @default("{}")
  discountApplications    Json?          @default("[]")
  metafields              Json?          @default("[]")
  fulfillments            Json?          @default("[]")
  transactions            Json?          @default("[]")
  extras                  Json?          @default("{}")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  shop                    Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  lineItems               LineItemData[]

  @@unique([shopId, orderId])
  @@index([shopId, orderDate])
  @@index([shopId, customerId])
  @@index([shopId, customerEmail])
  @@index([shopId, currencyCode])
  @@index([shopId, customerState])
  @@index([shopId, financialStatus])
  @@index([shopId, fulfillmentStatus])
  @@index([shopId, orderStatus])
  @@index([shopId, totalAmount])
  @@index([shopId, orderDate, financialStatus])
  @@map("OrderData")
}

model LineItemData {
  id         String    @id @default(cuid())
  orderId    String    @map("order_id")
  productId  String?   @map("product_id")
  variantId  String?   @map("variant_id")
  title      String?
  quantity   Int
  price      Float
  properties Json?     @default("{}")
  order      OrderData @relation(fields: [orderId], references: [id])

  @@map("line_item_data")
}

model ProductData {
  id                    String    @id @default(cuid())
  shopId                String
  productId             String
  title                 String    @db.VarChar(500)
  handle                String    @db.VarChar(255)
  description           String?
  descriptionHtml       String?
  productType           String?   @default("") @db.VarChar(100)
  vendor                String?   @default("") @db.VarChar(255)
  tags                  Json?     @default("[]")
  status                String?   @default("ACTIVE")
  totalInventory        Int?      @default(0)
  price                 Float     @default(0.0)
  compareAtPrice        Float?    @default(0.0)
  inventory             Int?      @default(0)
  imageUrl              String?   @db.VarChar(1000)
  imageAlt              String?   @db.VarChar(500)
  productCreatedAt      DateTime?
  productUpdatedAt      DateTime?
  onlineStoreUrl        String?   @db.VarChar(1000)
  onlineStorePreviewUrl String?   @db.VarChar(1000)
  seoTitle              String?   @db.VarChar(500)
  seoDescription        String?
  templateSuffix        String?   @db.VarChar(100)
  variants              Json?     @default("[]")
  images                Json?     @default("[]")
  media                 Json?     @default("[]")
  options               Json?     @default("[]")
  collections           Json?     @default("[]")
  metafields            Json?     @default("[]")
  extras                Json?     @default("{}")
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  shop                  Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, productType])
  @@index([shopId, vendor])
  @@index([shopId, price])
  @@index([shopId, status])
  @@index([shopId, isActive])
  @@index([shopId, totalInventory])
  @@index([shopId, productType, status])
  @@index([shopId, price, status])
  @@map("ProductData")
}

model CustomerData {
  id               String    @id @default(cuid())
  shopId           String
  customerId       String
  email            String?   @db.VarChar(255)
  firstName        String?   @db.VarChar(100)
  lastName         String?   @db.VarChar(100)
  totalSpent       Float     @default(0.0)
  orderCount       Int       @default(0)
  lastOrderDate    DateTime?
  tags             Json?     @default("[]")
  createdAtShopify DateTime?
  lastOrderId      String?   @db.VarChar(100)
  location         Json?     @default("{}")
  metafields       Json?     @default("[]")
  state            String?   @default("") @db.VarChar(50)
  verifiedEmail    Boolean   @default(false)
  taxExempt        Boolean   @default(false)
  defaultAddress   Json?     @default("{}")
  addresses        Json?     @default("[]")
  currencyCode     String?   @default("USD") @db.VarChar(10)
  customerLocale   String?   @default("en") @db.VarChar(10)
  isActive         Boolean   @default(true)
  extras           Json?     @default("{}")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  shop             Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, email])
  @@index([shopId, totalSpent])
  @@index([shopId, lastOrderDate])
  @@index([shopId, state])
  @@index([shopId, verifiedEmail])
  @@index([shopId, totalSpent, lastOrderDate])
  @@map("CustomerData")
}

model CollectionData {
  id             String   @id @default(cuid())
  shopId         String
  collectionId   String
  title          String   @db.VarChar(500)
  handle         String   @db.VarChar(255)
  description    String?  @default("")
  templateSuffix String?  @default("") @db.VarChar(100)
  seoTitle       String?  @default("") @db.VarChar(500)
  seoDescription String?  @default("")
  imageUrl       String?  @db.VarChar(1000)
  imageAlt       String?  @db.VarChar(500)
  productCount   Int      @default(0)
  isAutomated    Boolean  @default(false)
  isActive       Boolean  @default(true)
  metafields     Json?    @default("[]")
  extras         Json?    @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, title])
  @@index([shopId, handle])
  @@index([shopId, isAutomated])
  @@index([shopId, productCount])
  @@map("CollectionData")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?   @db.VarChar(500)
  expires       DateTime?
  accessToken   String    @db.VarChar(1000)
  userId        BigInt?
  firstName     String?   @db.VarChar(100)
  lastName      String?   @db.VarChar(100)
  email         String?   @db.VarChar(255)
  accountOwner  Boolean   @default(false)
  locale        String?   @db.VarChar(10)
  collaborator  Boolean?
  emailVerified Boolean?

  @@index([shop])
  @@index([expires])
  @@map("Session")
}

model Shop {
  id                           String                        @id @default(cuid())
  shopDomain                   String                        @unique @db.VarChar(255)
  customDomain                 String?                       @db.VarChar(255)
  accessToken                  String                        @db.VarChar(1000)
  planType                     String                        @default("Free") @db.VarChar(50)
  currencyCode                 String?                       @db.VarChar(10)
  moneyFormat                  String?                       @db.VarChar(100)
  isActive                     Boolean                       @default(true)
  onboardingCompleted          Boolean                       @default(false)
  email                        String?                       @db.VarChar(255)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  lastAnalysisAt               DateTime?
  collectionData               CollectionData[]
  collectionFeatures           CollectionFeatures[]
  customerBehaviorFeatures     CustomerBehaviorFeatures[]
  customerData                 CustomerData[]
  featureComputations          FeatureComputation[]
  interactionFeatures          InteractionFeatures[]
  orderData                    OrderData[]
  productData                  ProductData[]
  productFeatures              ProductFeatures[]
  productPairFeatures          ProductPairFeatures[]
  searchProductFeatures        SearchProductFeatures[]
  sessionFeatures              SessionFeatures[]
  userFeatures                 UserFeatures[]
  purchaseAttributions         PurchaseAttribution[]
  refundAttributionAdjustments RefundAttributionAdjustment[]
  refundData                   RefundData[]
  userInteractions             UserInteraction[]
  userSessions                 UserSession[]
  extensionActivities          ExtensionActivity[]


  @@index([shopDomain])
  @@index([isActive])
  @@index([planType])
  @@index([lastAnalysisAt])
  @@map("Shop")
}

model UserFeatures {
  id                          String   @id @default(cuid())
  shopId                      String
  customerId                  String
  totalPurchases              Int      @default(0)
  totalSpent                  Float    @default(0)
  avgOrderValue               Float    @default(0)
  lifetimeValue               Float    @default(0)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  daysSinceFirstOrder         Int?
  daysSinceLastOrder          Int?
  avgDaysBetweenOrders        Float?
  orderFrequencyPerMonth      Float?
  distinctProductsPurchased   Int      @default(0)
  distinctCategoriesPurchased Int      @default(0)
  preferredCategory           String?  @db.VarChar(100)
  preferredVendor             String?  @db.VarChar(255)
  pricePointPreference        String?  @db.VarChar(20)
  ordersWithDiscountCount     Int      @default(0)
  discountSensitivity         Float?
  avgDiscountAmount           Float?
  customerState               String?  @db.VarChar(50)
  isVerifiedEmail             Boolean  @default(false)
  customerAge                 Int?
  hasDefaultAddress           Boolean  @default(false)
  geographicRegion            String?  @db.VarChar(100)
  currencyPreference          String?  @db.VarChar(10)
  customerHealthScore         Int      @default(0)
  refundedOrders              Int      @default(0)
  refundRate                  Float    @default(0.0)
  totalRefundedAmount         Float    @default(0.0)
  netLifetimeValue             Float    @default(0.0)
  // NEW: Customer demographic features from CustomerData table
  customerEmail               String?  @db.VarChar(255)
  customerFirstName           String?  @db.VarChar(100)
  customerLastName            String?  @db.VarChar(100)
  customerLocation            Json?    @default("{}")
  customerTags                Json?    @default("[]")
  customerCreatedAtShopify    DateTime?
  customerLastOrderId         String?  @db.VarChar(100)
  customerMetafields          Json?    @default("[]")
  customerVerifiedEmail       Boolean  @default(false)
  customerTaxExempt           Boolean  @default(false)
  customerDefaultAddress       Json?    @default("{}")
  customerAddresses           Json?    @default("[]")
  customerCurrencyCode        String?  @db.VarChar(10)
  customerLocale              String?  @db.VarChar(10)
  lastComputedAt              DateTime @default(now())
  shop                        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, totalSpent])
  @@index([shopId, daysSinceLastOrder])
  @@index([shopId, refundRate])
  @@index([shopId, netLifetimeValue])
  @@index([shopId, lifetimeValue, daysSinceLastOrder])
  @@map("UserFeatures")
}

model ProductFeatures {
  id                     String    @id @default(cuid())
  shopId                 String
  productId              String
  viewCount30d           Int       @default(0)
  uniqueViewers30d       Int       @default(0)
  cartAddCount30d        Int       @default(0)
  cartViewCount30d       Int       @default(0)
  cartRemoveCount30d     Int       @default(0)
  purchaseCount30d       Int       @default(0)
  uniquePurchasers30d    Int       @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  viewToCartRate         Float?
  cartToPurchaseRate     Float?
  overallConversionRate  Float?
  cartAbandonmentRate    Float?
  cartModificationRate   Float?
  cartViewToPurchaseRate Float?
  lastViewedAt           DateTime?
  lastPurchasedAt        DateTime?
  firstPurchasedAt       DateTime?
  daysSinceFirstPurchase Int?
  daysSinceLastPurchase  Int?
  avgSellingPrice        Float?
  priceVariance          Float?
  totalInventory         Int?
  inventoryTurnover      Float?
  stockVelocity          Float?
  priceTier              String?   @db.VarChar(20)
  variantComplexity      Float?
  imageRichness          Float?
  tagDiversity           Float?
  metafieldUtilization   Float?
  mediaRichness          Float?
  seoOptimization        Float?
  seoTitleLength         Int?
  seoDescriptionLength   Int?
  hasVideoContent        Boolean   @default(false)
  has3DContent           Boolean   @default(false)
  mediaCount             Int       @default(0)
  hasOnlineStoreUrl      Boolean   @default(false)
  hasPreviewUrl          Boolean   @default(false)
  hasCustomTemplate      Boolean   @default(false)
  popularityScore        Float     @default(0)
  trendingScore          Float     @default(0)
  refundedOrders         Int       @default(0)
  refundRate             Float     @default(0.0)
  totalRefundedAmount    Float     @default(0.0)
  netRevenue             Float     @default(0.0)
  refundRiskScore        Float     @default(0.0)
  // NEW: Enhanced product features using previously unused fields
  contentRichnessScore   Int       @default(0)
  descriptionLength      Int       @default(0)
  descriptionHtmlLength  Int       @default(0)
  productAge             Int?
  lastUpdatedDays        Int?
  updateFrequency        Float?
  productType            String?   @db.VarChar(100)
  categoryComplexity     Float?
  availabilityScore      Float?
  statusStability        Float?
  lastComputedAt         DateTime  @default(now())
  shop                   Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, popularityScore])
  @@index([shopId, trendingScore])
  @@index([shopId, viewCount30d])
  @@index([shopId, purchaseCount30d])
  @@index([shopId, refundRate])
  @@index([shopId, refundRiskScore])
  @@index([shopId, netRevenue])
  @@index([shopId, popularityScore, trendingScore])
  @@map("ProductFeatures")
}

model CollectionFeatures {
  id                  String   @id @default(cuid())
  shopId              String
  collectionId        String
  productCount        Int      @default(0)
  isAutomated         Boolean  @default(false)
  viewCount30d        Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  uniqueViewers30d    Int      @default(0)
  clickThroughRate    Float?
  bounceRate          Float?
  avgProductPrice     Float?
  minProductPrice     Float?
  maxProductPrice     Float?
  priceRange          Float?
  priceVariance       Float?
  conversionRate      Float?
  revenueContribution Float?
  topProducts         Json     @default("[]")
  topVendors          Json     @default("[]")
  performanceScore    Float    @default(0)
  seoScore            Int      @default(0)
  imageScore          Int      @default(0)
  // NEW: Enhanced collection features using previously unused fields
  handleQuality       Float?
  templateScore       Int      @default(0)
  seoOptimizationScore Float?
  collectionAge        Int?
  updateFrequency     Float?
  lifecycleStage      String?  @db.VarChar(50)
  lastComputedAt      DateTime @default(now())
  shop                Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, productCount])
  @@index([shopId, performanceScore])
  @@index([shopId, viewCount30d, performanceScore])
  @@map("CollectionFeatures")
}

model CustomerBehaviorFeatures {
  id                          String   @id @default(cuid())
  shopId                      String
  customerId                  String
  sessionCount                Int      @default(0)
  avgEventsPerSession         Float?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  totalEventCount             Int      @default(0)
  productViewCount            Int      @default(0)
  collectionViewCount         Int      @default(0)
  cartAddCount                Int      @default(0)
  cartViewCount               Int      @default(0)
  cartRemoveCount             Int      @default(0)
  searchCount                 Int      @default(0)
  checkoutStartCount          Int      @default(0)
  purchaseCount               Int      @default(0)
  daysSinceFirstEvent         Int      @default(0)
  daysSinceLastEvent          Int      @default(0)
  mostActiveHour              Int?
  mostActiveDay               Int?
  uniqueProductsViewed        Int      @default(0)
  uniqueCollectionsViewed     Int      @default(0)
  searchTerms                 Json     @default("[]")
  topCategories               Json     @default("[]")
  deviceType                  String?  @db.VarChar(20)
  primaryReferrer             String?  @db.VarChar(255)
  browseToCartRate            Float?
  cartToPurchaseRate          Float?
  searchToPurchaseRate        Float?
  engagementScore             Float    @default(0)
  recencyScore                Float    @default(0)
  diversityScore              Float    @default(0)
  behavioralScore             Float    @default(0)
  totalUnifiedSessions        Int      @default(0)
  crossSessionSpanDays        Int      @default(0)
  sessionFrequencyScore       Float    @default(0)
  deviceDiversity             Int      @default(0)
  avgSessionDuration          Float?
  phoenixInteractionCount     Int      @default(0)
  apolloInteractionCount      Int      @default(0)
  venusInteractionCount       Int      @default(0)
  atlasInteractionCount       Int      @default(0)
  extensionEngagementScore    Float    @default(0)
  recommendationClickRate     Float    @default(0)
  upsellInteractionCount      Int      @default(0)
  totalInteractionsInSessions Int      @default(0)
  avgInteractionsPerSession   Float    @default(0)
  sessionEngagementScore      Float    @default(0)
  multiTouchAttributionScore  Float    @default(0)
  attributionRevenue          Float    @default(0)
  conversionPathLength        Int      @default(0)
  // NEW: Enhanced device and location features from behavioral events
  browserType                 String?  @db.VarChar(50)
  osType                      String?  @db.VarChar(50)
  screenResolution            String?  @db.VarChar(20)
  country                     String?  @db.VarChar(100)
  region                      String?  @db.VarChar(100)
  city                        String?  @db.VarChar(100)
  timezone                    String?  @db.VarChar(50)
  language                    String?  @db.VarChar(10)
  referrerType                String?  @db.VarChar(50)
  trafficSource               String?  @db.VarChar(50)
  deviceConsistency           Float?
  lastComputedAt              DateTime @default(now())
  shop                        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, engagementScore])
  @@index([shopId, behavioralScore])
  @@index([shopId, daysSinceLastEvent])
  @@index([shopId, totalUnifiedSessions])
  @@index([shopId, extensionEngagementScore])
  @@index([shopId, multiTouchAttributionScore])
  @@index([shopId, engagementScore, behavioralScore])
  @@map("CustomerBehaviorFeatures")
}

model InteractionFeatures {
  id                  String    @id @default(cuid())
  shopId              String
  customerId          String
  productId           String
  viewCount           Int       @default(0)
  cartAddCount        Int       @default(0)
  cartViewCount       Int       @default(0)
  cartRemoveCount     Int       @default(0)
  purchaseCount       Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  firstViewDate       DateTime?
  lastViewDate        DateTime?
  firstPurchaseDate   DateTime?
  lastPurchaseDate    DateTime?
  viewToPurchaseDays  Int?
  interactionSpanDays Int?
  interactionScore    Float     @default(0)
  affinityScore       Float?
  refundedPurchases   Int       @default(0)
  refundRate          Float     @default(0.0)
  totalRefundedAmount Float     @default(0.0)
  netPurchaseValue    Float     @default(0.0)
  refundRiskScore     Float     @default(0.0)
  lastComputedAt      DateTime  @default(now())
  shop                Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId, productId])
  @@index([shopId, customerId])
  @@index([shopId, productId])
  @@index([shopId, interactionScore])
  @@index([shopId, refundRate])
  @@index([shopId, refundRiskScore])
  @@index([shopId, netPurchaseValue])
  @@index([shopId, customerId, interactionScore])
  @@map("InteractionFeatures")
}

model SessionFeatures {
  id                  String   @id @default(cuid())
  shopId              String
  sessionId           String
  customerId          String?
  startTime           DateTime
  endTime             DateTime
  durationSeconds     Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  eventCount          Int      @default(0)
  pageViewCount       Int      @default(0)
  productViewCount    Int      @default(0)
  collectionViewCount Int      @default(0)
  searchCount         Int      @default(0)
  cartAddCount        Int      @default(0)
  cartViewCount       Int      @default(0)
  cartRemoveCount     Int      @default(0)
  checkoutStarted     Boolean  @default(false)
  checkoutCompleted   Boolean  @default(false)
  orderValue          Float?
  cartViewed          Boolean  @default(false)
  cartAbandoned       Boolean  @default(false)
  deviceType          String?  @db.VarChar(20)
  referrerDomain      String?  @db.VarChar(255)
  landingPage         String?  @db.VarChar(500)
  exitPage            String?  @db.VarChar(500)
  // NEW: Enhanced session features using device/location data
  browserType         String?  @db.VarChar(50)
  osType              String?  @db.VarChar(50)
  screenResolution    String?  @db.VarChar(20)
  country             String?  @db.VarChar(100)
  region              String?  @db.VarChar(100)
  city                String?  @db.VarChar(100)
  timezone            String?  @db.VarChar(50)
  language            String?  @db.VarChar(10)
  referrerType        String?  @db.VarChar(50)
  trafficSource       String?  @db.VarChar(50)
  deviceConsistency   Float?
  lastComputedAt      DateTime @default(now())
  shop                Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, sessionId])
  @@index([shopId, customerId])
  @@index([shopId, startTime])
  @@index([shopId, checkoutCompleted])
  @@index([shopId, startTime, checkoutCompleted])
  @@map("SessionFeatures")
}

model ProductPairFeatures {
  id               String    @id @default(cuid())
  shopId           String
  productId1       String
  productId2       String
  coPurchaseCount  Int       @default(0)
  coViewCount      Int       @default(0)
  coCartCount      Int       @default(0)
  coCartViews      Int       @default(0)
  coCartRemoves    Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  supportScore     Float?
  liftScore        Float?
  lastCoOccurrence DateTime?
  lastComputedAt   DateTime  @default(now())
  shop             Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId1, productId2])
  @@index([shopId, productId1])
  @@index([shopId, productId2])
  @@index([shopId, coPurchaseCount])
  @@index([shopId, productId1, coPurchaseCount])
  @@map("ProductPairFeatures")
}

model SearchProductFeatures {
  id               String    @id @default(cuid())
  shopId           String
  searchQuery      String    @db.VarChar(500)
  productId        String
  impressionCount  Int       @default(0)
  clickCount       Int       @default(0)
  purchaseCount    Int       @default(0)
  avgPosition      Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  clickThroughRate Float?
  conversionRate   Float?
  lastOccurrence   DateTime?
  lastComputedAt   DateTime  @default(now())
  shop             Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, searchQuery, productId])
  @@index([shopId, searchQuery])
  @@index([shopId, productId])
  @@index([shopId, clickThroughRate])
  @@index([shopId, searchQuery, clickThroughRate])
  @@map("SearchProductFeatures")
}

model UserIdentityLink {
  id         String   @id @default(cuid())
  shopId     String
  clientId   String
  customerId String
  linkedAt   DateTime @default(now())

  @@unique([shopId, clientId, customerId])
  @@index([shopId, clientId])
  @@index([shopId, customerId])
  @@map("UserIdentityLink")
}

model FeatureComputation {
  id           String    @id @default(cuid())
  shopId       String
  jobId        String
  status       String    @default("pending")
  featureCount Int       @default(0)
  metadata     Json?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  shop         Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([shopId, status, createdAt])
  @@map("FeatureComputation")
}

model UserSession {
  id                String                @id @default(cuid())
  shopId            String                @map("shop_id") @db.VarChar(255)
  customerId        String?               @map("customer_id") @db.VarChar(255)
  browserSessionId  String                @map("browser_session_id") @db.VarChar(255)
  status            String                @default("active") @db.VarChar(50)
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  lastActive        DateTime              @default(now()) @map("last_active") @db.Timestamptz(6)
  expiresAt         DateTime?             @map("expires_at") @db.Timestamptz(6)
  userAgent         String?               @map("user_agent")
  ipAddress         String?               @map("ip_address") @db.VarChar(45)
  referrer          String?
  extensionsUsed    Json                  @default("[]") @map("extensions_used")
  totalInteractions Int                   @default(0) @map("total_interactions")
  attributions      PurchaseAttribution[]
  interactions      UserInteraction[]
  shop              Shop                  @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId, browserSessionId])
  @@index([shopId])
  @@index([customerId])
  @@index([status])
  @@index([expiresAt])
  @@index([shopId, status])
  @@index([shopId, customerId, status])
  @@map("user_sessions")
}

model UserInteraction {
  id              String      @id @default(cuid())
  sessionId       String      @map("session_id") @db.VarChar(255)
  extensionType   String      @map("extension_type") @db.VarChar(50)
  interactionType String      @map("interaction_type") @db.VarChar(50)
  customerId      String?     @map("customer_id") @db.VarChar(255)
  shopId          String      @map("shop_id") @db.VarChar(255)
  metadata        Json        @default("{}")
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  session         UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  shop            Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([customerId])
  @@index([shopId])
  @@index([extensionType])
  @@index([interactionType])
  @@index([createdAt])
  @@index([shopId, extensionType])
  @@index([shopId, interactionType])
  @@index([shopId, customerId, createdAt])
  @@map("user_interactions")
}

model PurchaseAttribution {
  id                      String      @id @default(cuid())
  sessionId               String      @map("session_id") @db.VarChar(255)
  orderId                 String      @map("order_id") @db.VarChar(255)
  customerId              String?     @map("customer_id") @db.VarChar(255)
  shopId                  String      @map("shop_id") @db.VarChar(255)
  contributingExtensions  Json        @map("contributing_extensions")
  attributionWeights      Json        @map("attribution_weights")
  totalRevenue            Decimal     @map("total_revenue") @db.Decimal(10, 2)
  attributedRevenue       Json        @map("attributed_revenue")
  totalInteractions       Int         @map("total_interactions")
  interactionsByExtension Json        @map("interactions_by_extension")
  purchaseAt              DateTime    @map("purchase_at") @db.Timestamptz(6)
  createdAt               DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  attributionAlgorithm    String      @default("multi_touch") @map("attribution_algorithm") @db.VarChar(50)
  metadata                Json        @default("{}")
  session                 UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  shop                    Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, orderId])
  @@index([sessionId])
  @@index([orderId])
  @@index([customerId])
  @@index([shopId])
  @@index([purchaseAt])
  @@index([shopId, purchaseAt])
  @@index([shopId, customerId, purchaseAt])
  @@map("purchase_attributions")
}

model RefundData {
  id                String                        @id @default(cuid())
  shopId            String                        @map("shop_id") @db.VarChar(255)
  orderId           BigInt                        @map("order_id")
  refundId          String                        @map("refund_id") @db.VarChar(255)
  refundedAt        DateTime                      @map("refunded_at") @db.Timestamptz(6)
  note              String?                       @default("")
  restock           Boolean                       @default(false)
  totalRefundAmount Decimal                       @map("total_refund_amount") @db.Decimal(10, 2)
  currencyCode      String                        @default("USD") @map("currency_code") @db.VarChar(10)
  createdAt         DateTime                      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                      @updatedAt @map("updated_at") @db.Timestamptz(6)
  adjustments       RefundAttributionAdjustment[]
  shop              Shop                          @relation(fields: [shopId], references: [id], onDelete: Cascade)
  lineItems         RefundLineItemData[]

  @@unique([shopId, refundId])
  @@index([shopId, orderId])
  @@index([refundedAt])
  @@map("refund_data")
}

model RefundLineItemData {
  id           String     @id @default(cuid())
  refundId     String     @map("refund_id")
  orderId      BigInt     @map("order_id")
  productId    String?    @map("product_id") @db.VarChar(255)
  variantId    String?    @map("variant_id") @db.VarChar(255)
  quantity     Int
  unitPrice    Decimal    @map("unit_price") @db.Decimal(10, 2)
  refundAmount Decimal    @map("refund_amount") @db.Decimal(10, 2)
  properties   Json?      @default("{}")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  refund       RefundData @relation(fields: [refundId], references: [id], onDelete: Cascade)

  @@index([refundId])
  @@index([orderId])
  @@index([productId])
  @@map("refund_line_item_data")
}

model RefundAttributionAdjustment {
  id                 String     @id @default(cuid())
  shopId             String     @map("shop_id") @db.VarChar(255)
  orderId            BigInt     @map("order_id")
  refundId           String     @map("refund_id") @db.VarChar(255)
  perExtensionRefund Json       @default("{}") @map("per_extension_refund")
  totalRefundAmount  Decimal    @map("total_refund_amount") @db.Decimal(10, 2)
  computedAt         DateTime   @map("computed_at") @db.Timestamptz(6)
  metadata           Json       @default("{}")
  createdAt          DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  refund             RefundData @relation(fields: [refundId], references: [id], onDelete: Cascade)
  shop               Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, refundId])
  @@index([shopId, orderId])
  @@index([computedAt])
  @@map("refund_attribution_adjustments")
}

model BillingPlan {
  id             String            @id @default(cuid())
  shopId         String            @unique @map("shop_id") @db.VarChar(255)
  shopDomain     String            @map("shop_domain") @db.VarChar(255)
  name           String            @db.VarChar(100)
  type           BillingPlanType
  status         BillingPlanStatus @default(active)
  configuration  Json              @default("{}")
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  effectiveFrom  DateTime          @map("effective_from") @db.Timestamptz(6)
  effectiveUntil DateTime?         @map("effective_until") @db.Timestamptz(6)
  isTrialActive  Boolean           @default(true) @map("is_trial_active")
  trialThreshold Decimal           @default(200.00) @map("trial_threshold") @db.Decimal(10, 2)
  trialRevenue   Decimal           @default(0.00) @map("trial_revenue") @db.Decimal(12, 2)
  events         BillingEvent[]
  invoices       BillingInvoice[]

  @@index([shopDomain])
  @@index([status])
  @@index([effectiveFrom])
  @@map("billing_plans")
}


model BillingInvoice {
  id               String        @id @default(cuid())
  shopId           String        @map("shop_id") @db.VarChar(255)
  planId           String        @map("plan_id") @db.VarChar(255)
  invoiceNumber    String        @unique @map("invoice_number") @db.VarChar(50)
  status           InvoiceStatus @default(pending)
  subtotal         Decimal       @db.Decimal(10, 2)
  taxes            Decimal       @db.Decimal(10, 2)
  discounts        Decimal       @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  currency         String        @db.VarChar(3)
  periodStart      DateTime      @map("period_start") @db.Timestamptz(6)
  periodEnd        DateTime      @map("period_end") @db.Timestamptz(6)
  metricsId        String        @map("metrics_id") @db.VarChar(255)
  dueDate          DateTime      @map("due_date") @db.Timestamptz(6)
  paidAt           DateTime?     @map("paid_at") @db.Timestamptz(6)
  paymentMethod    String?       @map("payment_method") @db.VarChar(50)
  paymentReference String?       @map("payment_reference") @db.VarChar(255)
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  plan             BillingPlan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@index([planId])
  @@index([status])
  @@index([dueDate])
  @@index([createdAt])
  @@map("billing_invoices")
}

model BillingEvent {
  id          String           @id @default(cuid())
  shopId      String           @map("shop_id") @db.VarChar(255)
  type        BillingEventType
  data        Json             @default("{}")
  metadata    Json             @default("{}")
  occurredAt  DateTime         @map("occurred_at") @db.Timestamptz(6)
  processedAt DateTime         @default(now()) @map("processed_at") @db.Timestamptz(6)
  plan        BillingPlan      @relation(fields: [shopId], references: [shopId], onDelete: Cascade)

  @@index([shopId])
  @@index([type])
  @@index([occurredAt])
  @@index([processedAt])
  @@map("billing_events")
}

enum BillingPlanType {
  revenue_share
  performance_tier
  hybrid
  usage_based
}

enum BillingPlanStatus {
  active
  inactive
  suspended
  trial
}

enum BillingCycle {
  monthly
  quarterly
  annually
}

enum InvoiceStatus {
  draft
  pending
  paid
  overdue
  cancelled
  refunded
}

enum BillingEventType {
  plan_created
  plan_updated
  metrics_calculated
  invoice_generated
  payment_received
  payment_failed
  refund_processed
  billing_suspended
  billing_reactivated
}

enum ExtensionType {
  apollo
  atlas
  phoenix
  venus
}

enum AppBlockTarget {
  customer_account_order_status_block_render
  customer_account_order_index_block_render
  customer_account_profile_block_render
  checkout_post_purchase
  theme_app_extension
  web_pixel_extension
}

model ExtensionActivity {
  id                String           @id @default(cuid())
  shopId            String
  extensionType     ExtensionType
  extensionUid      String           @db.VarChar(255)
  extensionName     String           @db.VarChar(100)
  appBlockTarget    AppBlockTarget?  // For Venus app blocks, null for other extensions
  pageUrl           String?          @db.VarChar(500) // Track which page the extension loaded on
  appBlockLocation  String?          @db.VarChar(100) // User-friendly location name
  lastSeen          DateTime         @default(now())
  isActive          Boolean          @default(true) // Derived from lastSeen (last 24 hours)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  shop              Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, extensionType, extensionUid])
  @@index([shopId])
  @@index([extensionType])
  @@index([lastSeen])
  @@index([shopId, lastSeen])
  @@index([extensionType, lastSeen])
  @@map("ExtensionActivity")
}
