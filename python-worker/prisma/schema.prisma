generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Ingestion metadata enums
enum RawSourceType {
  webhook
  backfill
}

enum RawDataFormat {
  rest
  graphql
}

model RawOrder {
  id               String    @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime  @default(now())
  shopifyId        String?   @db.VarChar(100) // Shopify order ID for efficient lookups
  shopifyCreatedAt DateTime? // Shopify creation timestamp
  shopifyUpdatedAt DateTime? // Shopify update timestamp
  // New ingestion metadata
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?       @default(now())

  @@unique([shopId, shopifyId], name: "shopId_shopifyId")
  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawOrder")
}

model RawProduct {
  id               String    @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime  @default(now())
  shopifyId        String?   @db.VarChar(100) // Shopify product ID for efficient lookups
  shopifyCreatedAt DateTime? // Shopify creation timestamp
  shopifyUpdatedAt DateTime? // Shopify update timestamp
  // New ingestion metadata
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?       @default(now())

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawProduct")
}

model RawCustomer {
  id               String    @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime  @default(now())
  shopifyId        String?   @db.VarChar(100) // Shopify customer ID for efficient lookups
  shopifyCreatedAt DateTime? // Shopify creation timestamp
  shopifyUpdatedAt DateTime? // Shopify update timestamp
  // New ingestion metadata
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?       @default(now())

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawCustomer")
}

model RawCollection {
  id               String    @id @default(cuid())
  shopId           String
  payload          Json
  extractedAt      DateTime  @default(now())
  shopifyId        String?   @db.VarChar(100) // Shopify collection ID for efficient lookups
  shopifyCreatedAt DateTime? // Shopify creation timestamp
  shopifyUpdatedAt DateTime? // Shopify update timestamp
  // New ingestion metadata
  source           RawSourceType? @default(webhook)
  format           RawDataFormat? @default(rest)
  receivedAt       DateTime?       @default(now())

  @@index([shopId])
  @@index([shopId, shopifyId])
  @@index([shopId, shopifyUpdatedAt])
  @@index([shopId, shopifyCreatedAt])
  @@index([shopId, source])
  @@index([shopId, format])
  @@map("RawCollection")
}

model RawBehavioralEvents {
  id         String   @id @default(cuid())
  shopId     String
  payload    Json
  receivedAt DateTime @default(now())

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@index([shopId, receivedAt])
  @@map("RawBehavioralEvents")
}

// ===================== STAGING LAYER =====================

// Staging tables removed - data flows directly from Raw to Main tables
// Raw → NormalizationConsumer → Main (canonical format)

model NormalizationWatermark {
  id               String   @id @default(cuid())
  shopId           String
  dataType         String   @db.VarChar(50) // orders, products, customers, collections
  lastNormalizedAt DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([shopId, dataType])
  @@index([shopId])
  @@map("NormalizationWatermark")
}

model OrderData {
  id                      String    @id @default(cuid())
  shopId                  String
  orderId                 String
  orderName               String?   @db.VarChar(100) // Shopify order name (e.g., "#1001")
  customerId              String?   @db.VarChar(100)
  customerEmail           String?   @db.VarChar(255)
  customerPhone           String?   @db.VarChar(50)
  customerDisplayName     String?   @db.VarChar(255)
  customerState           String?   @db.VarChar(50)
  customerVerifiedEmail   Boolean?  @default(false)
  customerCreatedAt       DateTime?
  customerUpdatedAt       DateTime?
  customerDefaultAddress  Json?     @default("{}")
  totalAmount             Float     @default(0.0)
  subtotalAmount          Float?    @default(0.0)
  totalTaxAmount          Float?    @default(0.0)
  totalShippingAmount     Float?    @default(0.0)
  totalRefundedAmount     Float?    @default(0.0)
  totalOutstandingAmount  Float?    @default(0.0)
  orderDate               DateTime
  processedAt             DateTime?
  cancelledAt             DateTime?
  cancelReason            String?   @default("") @db.VarChar(500)
  orderLocale             String?   @default("en") @db.VarChar(10)
  currencyCode            String?   @default("USD") @db.VarChar(10)
  presentmentCurrencyCode String?   @default("USD") @db.VarChar(10)
  confirmed               Boolean   @default(false)
  test                    Boolean   @default(false)
  financialStatus         String?   @db.VarChar(50) // paid, pending, partially_paid, refunded, voided
  fulfillmentStatus       String?   @db.VarChar(50) // fulfilled, partial, restocked, null
  orderStatus             String?   @db.VarChar(50) // open, closed, cancelled, any
  tags                    Json?     @default("[]")
  note                    String?   @default("") @db.Text
  noteAttributes          Json?     @default("[]")
  lineItems               Json      @default("[]")
  shippingAddress         Json?     @default("{}")
  billingAddress          Json?     @default("{}")
  discountApplications    Json?     @default("[]")
  metafields              Json?     @default("[]")
  fulfillments            Json?     @default("[]")
  transactions            Json?     @default("[]")
  extras                  Json?     @default("{}")  // Preserve unknown fields from raw payloads
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  shop                    Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, orderId])
  @@index([shopId, orderDate])
  @@index([shopId, customerId])
  @@index([shopId, customerEmail])
  @@index([shopId, currencyCode])
  @@index([shopId, customerState])
  @@index([shopId, financialStatus])
  @@index([shopId, fulfillmentStatus])
  @@index([shopId, orderStatus])
  @@index([shopId, totalAmount])
  @@index([shopId, orderDate, financialStatus])
  @@map("OrderData")
}

model ProductData {
  id                    String         @id @default(cuid())
  shopId                String
  productId             String
  title                 String         @db.VarChar(500)
  handle                String         @db.VarChar(255)
  description           String?        @db.Text
  descriptionHtml       String?        @db.Text
  productType           String?        @default("") @db.VarChar(100)
  vendor                String?        @default("") @db.VarChar(255)
  tags                  Json?          @default("[]")
  status                String?        @default("ACTIVE")
  totalInventory        Int?           @default(0)
  price                 Float          @default(0.0)
  compareAtPrice        Float?         @default(0.0)
  inventory             Int?           @default(0)
  imageUrl              String?        @db.VarChar(1000)
  imageAlt              String?        @db.VarChar(500)
  productCreatedAt      DateTime?
  productUpdatedAt      DateTime?
  onlineStoreUrl        String?        @db.VarChar(1000)
  onlineStorePreviewUrl String?        @db.VarChar(1000)
  seoTitle              String?        @db.VarChar(500)
  seoDescription        String?        @db.Text
  templateSuffix        String?        @db.VarChar(100)
  variants              Json?          @default("[]")
  images                Json?          @default("[]")
  media                 Json?          @default("[]")
  options               Json?          @default("[]")
  collections           Json?          @default("[]")
  metafields            Json?          @default("[]")
  extras                Json?          @default("{}")  // Preserve unknown fields from raw payloads
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  shop                  Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, productType])
  @@index([shopId, vendor])
  @@index([shopId, price])
  @@index([shopId, status])
  @@index([shopId, isActive])
  @@index([shopId, totalInventory])
  @@index([shopId, productType, status])
  @@index([shopId, price, status])
  @@map("ProductData")
}

model CustomerData {
  id               String    @id @default(cuid())
  shopId           String
  customerId       String
  email            String?   @db.VarChar(255)
  firstName        String?   @db.VarChar(100)
  lastName         String?   @db.VarChar(100)
  totalSpent       Float     @default(0.0)
  orderCount       Int       @default(0)
  lastOrderDate    DateTime?
  tags             Json?     @default("[]")
  createdAtShopify DateTime?
  lastOrderId      String?   @db.VarChar(100)
  location         Json?     @default("{}")
  metafields       Json?     @default("[]")
  state            String?   @default("") @db.VarChar(50)
  verifiedEmail    Boolean   @default(false)
  taxExempt        Boolean   @default(false)
  defaultAddress   Json?     @default("{}")
  addresses        Json?     @default("[]")
  currencyCode     String?   @default("USD") @db.VarChar(10)
  customerLocale   String?   @default("en") @db.VarChar(10)
  extras           Json?     @default("{}")  // Preserve unknown fields from raw payloads
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  shop             Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, email])
  @@index([shopId, totalSpent])
  @@index([shopId, lastOrderDate])
  @@index([shopId, state])
  @@index([shopId, verifiedEmail])
  @@index([shopId, totalSpent, lastOrderDate])
  @@map("CustomerData")
}

model CollectionData {
  id             String   @id @default(cuid())
  shopId         String
  collectionId   String
  title          String   @db.VarChar(500)
  handle         String   @db.VarChar(255)
  description    String?  @default("") @db.Text
  templateSuffix String?  @default("") @db.VarChar(100)
  seoTitle       String?  @default("") @db.VarChar(500)
  seoDescription String?  @default("") @db.Text
  imageUrl       String?  @db.VarChar(1000)
  imageAlt       String?  @db.VarChar(500)
  productCount   Int      @default(0)
  isAutomated    Boolean  @default(false)
  metafields     Json?    @default("[]")
  extras         Json?    @default("{}")  // Preserve unknown fields from raw payloads
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, title])
  @@index([shopId, handle])
  @@index([shopId, isAutomated])
  @@index([shopId, productCount])
  @@map("CollectionData")
}

model BehavioralEvents {
  eventId    String   @id
  shopId     String
  customerId String?  @db.VarChar(100)
  clientId   String?  @db.VarChar(100) // Session identifier from Shopify Web Pixels
  eventType  String   @db.VarChar(100)
  timestamp DateTime
  eventData  Json?

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, eventType])
  @@index([shopId, timestamp])
  @@index([shopId, customerId])
  @@index([shopId, clientId])
  @@index([shopId, eventType, timestamp])
  @@map("BehavioralEvents")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?   @db.VarChar(500)
  expires       DateTime?
  accessToken   String    @db.VarChar(1000)
  userId        BigInt?
  firstName     String?   @db.VarChar(100)
  lastName      String?   @db.VarChar(100)
  email         String?   @db.VarChar(255)
  accountOwner  Boolean   @default(false)
  locale        String?   @db.VarChar(10)
  collaborator  Boolean?
  emailVerified Boolean?

  @@index([shop])
  @@index([expires])
  @@map("Session")
}

model Shop {
  id                   String                   @id @default(cuid())
  shopDomain           String                   @unique @db.VarChar(255)
  customDomain         String?                  @db.VarChar(255)
  accessToken          String                   @db.VarChar(1000)
  planType             String                   @default("Free") @db.VarChar(50)
  currencyCode         String?                  @db.VarChar(10)
  moneyFormat          String?                  @db.VarChar(100)
  isActive             Boolean                  @default(true)
  email                String?                  @db.VarChar(255)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  lastAnalysisAt       DateTime?
  orderData            OrderData[]
  productData          ProductData[]
  customerData         CustomerData[]
  collectionData       CollectionData[]
  featureComputations  FeatureComputation[]
  userFeatures         UserFeatures[]
  productFeatures      ProductFeatures[]
  interactionFeatures  InteractionFeatures[]

  // Enhanced feature models
  collectionFeatures        CollectionFeatures[]
  customerBehaviorFeatures  CustomerBehaviorFeatures[]
  sessionFeatures           SessionFeatures[]
  productPairFeatures       ProductPairFeatures[]
  searchProductFeatures     SearchProductFeatures[]

  // Behavioral events
  rawBehavioralEvents RawBehavioralEvents[]
  behavioralEvents    BehavioralEvents[]
  
  // Unified analytics
  userSessions        UserSession[]
  userInteractions    UserInteraction[]
  purchaseAttributions PurchaseAttribution[]

  @@index([shopDomain])
  @@index([isActive])
  @@index([planType])
  @@index([lastAnalysisAt])
  @@map("Shop")
}

// ============= USER/CUSTOMER FEATURES =============

model UserFeatures {
  id         String @id @default(cuid())
  shopId     String
  customerId String

  // Purchase Metrics
  totalPurchases Int   @default(0)
  totalSpent     Float @default(0)
  avgOrderValue  Float @default(0)
  lifetimeValue  Float @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Time-based Metrics
  daysSinceFirstOrder    Int?
  daysSinceLastOrder     Int?
  avgDaysBetweenOrders   Float?
  orderFrequencyPerMonth Float?

  // Product Preferences
  distinctProductsPurchased   Int     @default(0)
  distinctCategoriesPurchased Int     @default(0)
  preferredCategory           String? @db.VarChar(100)
  preferredVendor             String? @db.VarChar(255)
  pricePointPreference        String? @db.VarChar(20) // "budget", "mid", "premium", "luxury"

  // Discount Behavior
  ordersWithDiscountCount Int    @default(0)
  discountSensitivity     Float? // % of orders with discounts
  avgDiscountAmount       Float?

  // Enhanced Customer Features (from Order API)
  customerState        String? @db.VarChar(50)  // "ENABLED", "DISABLED", etc.
  isVerifiedEmail      Boolean @default(false)  // Email verification status
  customerAge          Int?                     // Days since customer creation
  hasDefaultAddress    Boolean @default(false)  // Has default address
  geographicRegion     String? @db.VarChar(100) // Geographic region from address
  currencyPreference   String? @db.VarChar(10)  // Preferred currency
  customerHealthScore  Int     @default(0)      // 0-100 customer health score

  // Refund Metrics (NEW)
  refundedOrders       Int     @default(0)      // Number of refunded orders
  refundRate           Float   @default(0.0)    // Percentage of orders refunded
  totalRefundedAmount  Float   @default(0.0)    // Total amount refunded
  netLifetimeValue     Float   @default(0.0)    // Lifetime value minus refunds

  lastComputedAt DateTime @default(now())
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, totalSpent])
  @@index([shopId, daysSinceLastOrder])
  @@index([shopId, refundRate])
  @@index([shopId, netLifetimeValue])
  @@index([shopId, lifetimeValue, daysSinceLastOrder])
  @@map("UserFeatures")
}

// ============= PRODUCT FEATURES =============

model ProductFeatures {
  id        String @id @default(cuid())
  shopId    String
  productId String

  // View & Engagement Metrics (30-day window)
  viewCount30d        Int @default(0)
  uniqueViewers30d    Int @default(0)
  cartAddCount30d     Int @default(0)
  cartViewCount30d    Int @default(0)
  cartRemoveCount30d  Int @default(0)
  purchaseCount30d    Int @default(0)
  uniquePurchasers30d Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Conversion Metrics
  viewToCartRate        Float? // cartAdds / views
  cartToPurchaseRate    Float? // purchases / cartAdds
  overallConversionRate Float? // purchases / views
  cartAbandonmentRate   Float? // cart views without purchase
  cartModificationRate  Float? // cart removes / cart adds
  cartViewToPurchaseRate Float? // purchases / cart views

  // Temporal Metrics
  lastViewedAt           DateTime?
  lastPurchasedAt        DateTime?
  firstPurchasedAt       DateTime?
  daysSinceFirstPurchase Int?
  daysSinceLastPurchase  Int?

  // Price & Inventory
  avgSellingPrice   Float? // Actual price from orders
  priceVariance     Float? // Price consistency
  totalInventory    Int?   // Total inventory from ProductData
  inventoryTurnover Float? // Sales rate vs stock
  stockVelocity     Float? // Units sold per day
  priceTier         String? @db.VarChar(20) // "budget", "mid", "premium", "luxury"

  // Product Metadata Scores (existing fields)
  variantComplexity    Float? // 0-1 normalized
  imageRichness        Float? // 0-1 normalized  
  tagDiversity         Float? // 0-1 normalized
  metafieldUtilization Float? // 0-1 normalized

  // Enhanced Features (from new Shopify data)
  mediaRichness        Float?  // 0-100 score based on media content
  seoOptimization      Float?  // 0-100 SEO optimization score
  seoTitleLength       Int?    // Length of SEO title
  seoDescriptionLength Int?    // Length of SEO description
  hasVideoContent      Boolean @default(false) // Has video media
  has3DContent         Boolean @default(false) // Has 3D model media
  mediaCount           Int     @default(0)     // Total media items
  hasOnlineStoreUrl    Boolean @default(false) // Has online store URL
  hasPreviewUrl        Boolean @default(false) // Has preview URL
  hasCustomTemplate    Boolean @default(false) // Has custom template

  // Computed Scores
  popularityScore Float @default(0) // Normalized 0-1
  trendingScore   Float @default(0) // Velocity change

  // Refund Metrics (NEW)
  refundedOrders      Int   @default(0)   // Number of refunded orders for this product
  refundRate          Float @default(0.0) // Percentage of orders refunded
  totalRefundedAmount Float @default(0.0) // Total amount refunded for this product
  netRevenue          Float @default(0.0) // Revenue minus refunds
  refundRiskScore     Float @default(0.0) // Risk score based on refund rate (0-100)

  lastComputedAt DateTime @default(now())
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, popularityScore])
  @@index([shopId, trendingScore])
  @@index([shopId, viewCount30d])
  @@index([shopId, purchaseCount30d])
  @@index([shopId, refundRate])
  @@index([shopId, refundRiskScore])
  @@index([shopId, netRevenue])
  @@index([shopId, popularityScore, trendingScore])
  @@map("ProductFeatures")
}

// ============= COLLECTION FEATURES =============

model CollectionFeatures {
  id           String @id @default(cuid())
  shopId       String
  collectionId String

  // Basic Metrics
  productCount Int     @default(0)
  isAutomated  Boolean @default(false)

  // Engagement Metrics (30-day window)
  viewCount30d     Int    @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uniqueViewers30d Int    @default(0)
  clickThroughRate Float? // Product clicks / collection views
  bounceRate       Float? // Single page visits / total visits

  // Product Metrics
  avgProductPrice Float?
  minProductPrice Float?
  maxProductPrice Float?
  priceRange      Float? // max - min
  priceVariance   Float? // Standard deviation

  // Performance
  conversionRate      Float? // Purchases from collection / views
  revenueContribution Float? // % of total store revenue
  topProducts         Json @default("[]") // Array of top 5 product IDs
  topVendors          Json @default("[]") // Array of main vendors

  // Scores
  performanceScore Float @default(0)
  seoScore         Int   @default(0)
  imageScore       Int   @default(0)

  lastComputedAt DateTime @default(now())
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, collectionId])
  @@index([shopId, productCount])
  @@index([shopId, performanceScore])
  @@index([shopId, viewCount30d, performanceScore])
  @@map("CollectionFeatures")
}

// ============= CUSTOMER BEHAVIOR FEATURES =============

model CustomerBehaviorFeatures {
  id         String @id @default(cuid())
  shopId     String
  customerId String

  // Session Metrics
  sessionCount        Int    @default(0)
  avgEventsPerSession Float?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Event Counts
  totalEventCount     Int @default(0)
  productViewCount    Int @default(0)
  collectionViewCount Int @default(0)
  cartAddCount        Int @default(0)
  cartViewCount       Int @default(0)
  cartRemoveCount     Int @default(0)
  searchCount         Int @default(0)
  checkoutStartCount  Int @default(0)
  purchaseCount       Int @default(0)

  // Temporal Patterns
  daysSinceFirstEvent Int  @default(0)
  daysSinceLastEvent  Int  @default(0)
  mostActiveHour      Int? // 0-23
  mostActiveDay       Int? // 0-6 (Sun-Sat)

  // Behavior Patterns
  uniqueProductsViewed    Int     @default(0)
  uniqueCollectionsViewed Int     @default(0)
  searchTerms             Json @default("[]") // Array of search queries
  topCategories           Json @default("[]") // Top 3 preferred categories
  deviceType              String? @db.VarChar(20) // "mobile", "desktop", "tablet"
  primaryReferrer         String? @db.VarChar(255)

  // Conversion Metrics
  browseToCartRate     Float? // Cart adds / product views
  cartToPurchaseRate   Float? // Purchases / cart adds
  searchToPurchaseRate Float? // Purchases after search / searches

  // Computed Scores (0-1 normalized)
  engagementScore Float @default(0)
  recencyScore    Float @default(0)
  diversityScore  Float @default(0)
  behavioralScore Float @default(0)

  // NEW: Enhanced features from unified analytics
  // Cross-session features
  totalUnifiedSessions    Int   @default(0)
  crossSessionSpanDays    Int   @default(0)
  sessionFrequencyScore   Float @default(0)
  deviceDiversity         Int   @default(0)
  avgSessionDuration      Float? // Enhanced session duration from unified analytics

  // Extension-specific features
  phoenixInteractionCount    Int   @default(0)
  apolloInteractionCount     Int   @default(0)
  venusInteractionCount      Int   @default(0)
  atlasInteractionCount      Int   @default(0)
  extensionEngagementScore   Float @default(0)
  recommendationClickRate    Float @default(0)
  upsellInteractionCount     Int   @default(0)

  // Enhanced session metrics
  totalInteractionsInSessions Int   @default(0)
  avgInteractionsPerSession   Float @default(0)
  sessionEngagementScore      Float @default(0)

  // Attribution features
  multiTouchAttributionScore Float @default(0)
  attributionRevenue         Float @default(0)
  conversionPathLength       Int   @default(0)

  lastComputedAt DateTime @default(now())
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, engagementScore])
  @@index([shopId, behavioralScore])
  @@index([shopId, daysSinceLastEvent])
  @@index([shopId, totalUnifiedSessions])
  @@index([shopId, extensionEngagementScore])
  @@index([shopId, multiTouchAttributionScore])
  @@index([shopId, engagementScore, behavioralScore])
  @@map("CustomerBehaviorFeatures")
}

// ============= INTERACTION FEATURES =============

model InteractionFeatures {
  id         String @id @default(cuid())
  shopId     String
  customerId String
  productId  String

  // Event Counts
  viewCount     Int @default(0)
  cartAddCount  Int @default(0)
  cartViewCount Int @default(0)
  cartRemoveCount Int @default(0)
  purchaseCount Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Temporal Data
  firstViewDate     DateTime?
  lastViewDate      DateTime?
  firstPurchaseDate DateTime?
  lastPurchaseDate  DateTime?

  // Conversion Metrics
  viewToPurchaseDays  Int? // Days between first view and purchase
  interactionSpanDays Int? // Days between first and last interaction

  // Computed Scores
  interactionScore Float  @default(0) // Weighted: views*1 + cart*3 + purchase*7
  affinityScore    Float? // Normalized 0-1

  // Refund Metrics (NEW)
  refundedPurchases   Int   @default(0)   // Number of refunded purchases for this interaction
  refundRate          Float @default(0.0) // Percentage of purchases refunded
  totalRefundedAmount Float @default(0.0) // Total amount refunded for this interaction
  netPurchaseValue    Float @default(0.0) // Purchase value minus refunds
  refundRiskScore     Float @default(0.0) // Risk score based on refund rate (0-100)

  lastComputedAt DateTime @default(now())
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId, productId])
  @@index([shopId, customerId])
  @@index([shopId, productId])
  @@index([shopId, interactionScore])
  @@index([shopId, refundRate])
  @@index([shopId, refundRiskScore])
  @@index([shopId, netPurchaseValue])
  @@index([shopId, customerId, interactionScore])
  @@map("InteractionFeatures")
}

// ============= SESSION FEATURES =============

model SessionFeatures {
  id         String  @id @default(cuid())
  shopId     String
  sessionId  String // From clientId
  customerId String? // Null if anonymous

  // Session Timing
  startTime       DateTime
  endTime         DateTime
  durationSeconds Int

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Event Counts
  eventCount          Int @default(0)
  pageViewCount       Int @default(0)
  productViewCount    Int @default(0)
  collectionViewCount Int @default(0)
  searchCount         Int @default(0)
  cartAddCount        Int @default(0)
  cartViewCount       Int @default(0)
  cartRemoveCount     Int @default(0)

  // Conversion
  checkoutStarted   Boolean @default(false)
  checkoutCompleted Boolean @default(false)
  orderValue        Float?
  cartViewed        Boolean @default(false)
  cartAbandoned     Boolean @default(false)

  // Context
  deviceType     String? @db.VarChar(20)
  referrerDomain String? @db.VarChar(255)
  landingPage    String? @db.VarChar(500)
  exitPage       String? @db.VarChar(500)

  lastComputedAt DateTime @default(now())
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, sessionId])
  @@index([shopId, customerId])
  @@index([shopId, startTime])
  @@index([shopId, checkoutCompleted])
  @@index([shopId, startTime, checkoutCompleted])
  @@map("SessionFeatures")
}

// ============= PRODUCT PAIR FEATURES =============

model ProductPairFeatures {
  id         String @id @default(cuid())
  shopId     String
  productId1 String
  productId2 String

  // Co-occurrence Counts
  coPurchaseCount Int @default(0) // Same order
  coViewCount     Int @default(0) // Same session
  coCartCount     Int @default(0) // Same cart
  coCartViews     Int @default(0) // Same cart view session
  coCartRemoves   Int @default(0) // Same cart remove session

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Metrics
  supportScore     Float? // Confidence metric
  liftScore        Float? // Correlation strength
  lastCoOccurrence DateTime?

  lastComputedAt DateTime @default(now())
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId1, productId2])
  @@index([shopId, productId1])
  @@index([shopId, productId2])
  @@index([shopId, coPurchaseCount])
  @@index([shopId, productId1, coPurchaseCount])
  @@map("ProductPairFeatures")
}

// ============= SEARCH PRODUCT FEATURES =============

model SearchProductFeatures {
  id          String @id @default(cuid())
  shopId      String
  searchQuery String @db.VarChar(500)
  productId   String

  // Metrics
  impressionCount Int    @default(0) // Times shown in results
  clickCount      Int    @default(0) // Times clicked
  purchaseCount   Int    @default(0) // Times purchased after search
  avgPosition     Float? // Average position in results

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Rates
  clickThroughRate Float? // Clicks / impressions
  conversionRate   Float? // Purchases / clicks

  lastOccurrence DateTime?
  lastComputedAt DateTime  @default(now())
  shop           Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, searchQuery, productId])
  @@index([shopId, searchQuery])
  @@index([shopId, productId])
  @@index([shopId, clickThroughRate])
  @@index([shopId, searchQuery, clickThroughRate])
  @@map("SearchProductFeatures")
}

model UserIdentityLink {
  id         String   @id @default(cuid())
  shopId     String
  clientId   String // Anonymous session/client ID
  customerId String // Permanent customer ID
  linkedAt   DateTime @default(now())

  @@unique([shopId, clientId, customerId])
  @@index([shopId, clientId])
  @@index([shopId, customerId])
  @@map("UserIdentityLink")
}

model FeatureComputation {
  id           String    @id @default(cuid())
  shopId       String
  jobId        String
  status       String    @default("pending") // "pending", "computing", "completed", "failed"
  featureCount Int       @default(0)
  metadata     Json?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  shop         Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([shopId, status, createdAt])
  @@map("FeatureComputation")
}

// ============= GORSE TABLES =============

model GorseFeedback {
  feedbackType String   @map("feedback_type") @db.VarChar(256)
  userId       String   @map("user_id") @db.VarChar(256)
  itemId       String   @map("item_id") @db.VarChar(256)
  timeStamp    DateTime @map("time_stamp") @db.Timestamptz
  comment      String   @default("") @db.Text

  @@id([feedbackType, userId, itemId])
  @@index([feedbackType, timeStamp])
  @@index([userId, timeStamp])
  @@map("feedback")
}

model GorseItems {
  itemId     String   @map("item_id") @id @db.VarChar(256)
  isHidden   Boolean  @map("is_hidden") @default(false)
  categories Json     @default("[]")
  timeStamp  DateTime @map("time_stamp") @db.Timestamptz
  labels     Json     @default("[]")
  comment    String   @default("") @db.Text

  @@index([isHidden])
  @@index([timeStamp])
  @@map("items")
}

model GorseUsers {
  userId    String @map("user_id") @id @db.VarChar(256)
  labels    Json   @default("[]")
  subscribe Json   @default("[]")
  comment   String @default("") @db.Text

  @@map("users")
}

// ============= UNIFIED ANALYTICS TABLES =============

model UserSession {
  id                String   @id @default(cuid())
  shopId            String   @map("shop_id") @db.VarChar(255)
  customerId        String?  @map("customer_id") @db.VarChar(255)
  browserSessionId  String   @map("browser_session_id") @db.VarChar(255)
  status            String   @default("active") @db.VarChar(50)

  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  lastActive        DateTime @default(now()) @map("last_active") @db.Timestamptz
  expiresAt         DateTime? @map("expires_at") @db.Timestamptz

  // Metadata
  userAgent         String?  @map("user_agent") @db.Text
  ipAddress         String?  @map("ip_address") @db.VarChar(45)
  referrer          String?  @db.Text

  // Extension tracking
  extensionsUsed    Json     @default("[]") @map("extensions_used")
  totalInteractions Int      @default(0) @map("total_interactions")

  // Relations
  interactions      UserInteraction[]
  attributions      PurchaseAttribution[]
  shop              Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId, browserSessionId])
  @@index([shopId])
  @@index([customerId])
  @@index([status])
  @@index([expiresAt])
  @@index([shopId, status])
  @@index([shopId, customerId, status])
  @@map("user_sessions")
}

model UserInteraction {
  id                      String   @id @default(cuid())
  sessionId               String   @map("session_id") @db.VarChar(255)
  extensionType           String   @map("extension_type") @db.VarChar(50)
  context                 String   @db.VarChar(50)
  interactionType         String   @map("interaction_type") @db.VarChar(50)

  // User and session info
  customerId              String?  @map("customer_id") @db.VarChar(255)
  shopId                  String   @map("shop_id") @db.VarChar(255)

  // Interaction details
  productId               String?  @map("product_id") @db.VarChar(255)
  collectionId            String?  @map("collection_id") @db.VarChar(255)
  orderId                 String?  @map("order_id") @db.VarChar(255)

  // Recommendation specific
  recommendationId        String?  @map("recommendation_id") @db.VarChar(255)
  recommendationPosition  Int?     @map("recommendation_position")
  recommendationAlgorithm String?  @map("recommendation_algorithm") @db.VarChar(100)

  // Interaction metadata
  value                   Float?
  quantity                Int?
  metadata                Json     @default("{}")

  // Timestamps
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  session                 UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  shop                    Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([customerId])
  @@index([shopId])
  @@index([extensionType])
  @@index([interactionType])
  @@index([productId])
  @@index([createdAt])
  @@index([shopId, extensionType])
  @@index([shopId, interactionType])
  @@index([shopId, customerId, createdAt])
  @@map("user_interactions")
}

model PurchaseAttribution {
  id                      String   @id @default(cuid())
  sessionId               String   @map("session_id") @db.VarChar(255)
  orderId                 String   @map("order_id") @db.VarChar(255)
  customerId              String?  @map("customer_id") @db.VarChar(255)
  shopId                  String   @map("shop_id") @db.VarChar(255)

  // Attribution details
  contributingExtensions  Json     @map("contributing_extensions")
  attributionWeights      Json     @map("attribution_weights")

  // Revenue tracking
  totalRevenue            Decimal  @map("total_revenue") @db.Decimal(10, 2)
  attributedRevenue       Json     @map("attributed_revenue")

  // Interaction tracking
  totalInteractions       Int      @map("total_interactions")
  interactionsByExtension Json     @map("interactions_by_extension")

  // Timestamps
  purchaseAt              DateTime @map("purchase_at") @db.Timestamptz
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Metadata
  attributionAlgorithm    String   @default("multi_touch") @map("attribution_algorithm") @db.VarChar(50)
  metadata                Json     @default("{}")

  // Relations
  session                 UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  shop                    Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([orderId])
  @@index([customerId])
  @@index([shopId])
  @@index([purchaseAt])
  @@index([shopId, purchaseAt])
  @@index([shopId, customerId, purchaseAt])
  @@map("purchase_attributions")
}

// ============= BILLING SYSTEM TABLES =============

model BillingPlan {
  id               String   @id @default(cuid())
  shopId           String   @map("shop_id") @db.VarChar(255)
  shopDomain       String   @map("shop_domain") @db.VarChar(255)
  
  // Plan Configuration
  name             String   @db.VarChar(100)
  type             BillingPlanType
  status           BillingPlanStatus @default(active)
  
  // Plan Settings
  configuration    Json     @default("{}")
  
  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz
  effectiveFrom    DateTime @map("effective_from") @db.Timestamptz
  effectiveUntil   DateTime? @map("effective_until") @db.Timestamptz
  
  // Relations
  invoices         BillingInvoice[]
  metrics          BillingMetrics[]
  events           BillingEvent[]
  
  @@unique([shopId])
  @@index([shopDomain])
  @@index([status])
  @@index([effectiveFrom])
  @@map("billing_plans")
}

model BillingMetrics {
  id               String   @id @default(cuid())
  shopId           String   @map("shop_id") @db.VarChar(255)
  planId           String   @map("plan_id") @db.VarChar(255)
  
  // Period
  periodStart      DateTime @map("period_start") @db.Timestamptz
  periodEnd        DateTime @map("period_end") @db.Timestamptz
  cycle            BillingCycle
  
  // Revenue Metrics
  totalRevenue     Decimal  @map("total_revenue") @db.Decimal(12, 2)
  attributedRevenue Decimal @map("attributed_revenue") @db.Decimal(12, 2)
  billableRevenue  Decimal  @map("billable_revenue") @db.Decimal(12, 2)
  
  // Performance Metrics
  totalInteractions Int     @map("total_interactions")
  totalConversions  Int     @map("total_conversions")
  conversionRate    Float   @map("conversion_rate")
  averageOrderValue Decimal @map("average_order_value") @db.Decimal(10, 2)
  
  // Extension Performance
  extensionMetrics  Json    @map("extension_metrics") @default("[]")
  
  // Calculated Billing
  calculatedFee     Decimal @map("calculated_fee") @db.Decimal(10, 2)
  appliedDiscounts  Decimal @map("applied_discounts") @db.Decimal(10, 2)
  finalFee          Decimal @map("final_fee") @db.Decimal(10, 2)
  
  // Timestamps
  calculatedAt      DateTime @default(now()) @map("calculated_at") @db.Timestamptz
  billedAt          DateTime? @map("billed_at") @db.Timestamptz
  
  // Relations
  plan              BillingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@unique([shopId, periodStart, periodEnd])
  @@index([shopId])
  @@index([planId])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("billing_metrics")
}

model BillingInvoice {
  id               String   @id @default(cuid())
  shopId           String   @map("shop_id") @db.VarChar(255)
  planId           String   @map("plan_id") @db.VarChar(255)
  
  // Invoice Details
  invoiceNumber    String   @map("invoice_number") @db.VarChar(50)
  status           InvoiceStatus @default(pending)
  
  // Financial Details
  subtotal         Decimal  @db.Decimal(10, 2)
  taxes            Decimal  @db.Decimal(10, 2)
  discounts        Decimal  @db.Decimal(10, 2)
  total            Decimal  @db.Decimal(10, 2)
  currency         String   @db.VarChar(3)
  
  // Period and Metrics
  periodStart      DateTime @map("period_start") @db.Timestamptz
  periodEnd        DateTime @map("period_end") @db.Timestamptz
  metricsId        String   @map("metrics_id") @db.VarChar(255)
  
  // Payment
  dueDate          DateTime @map("due_date") @db.Timestamptz
  paidAt           DateTime? @map("paid_at") @db.Timestamptz
  paymentMethod    String?  @map("payment_method") @db.VarChar(50)
  paymentReference String?  @map("payment_reference") @db.VarChar(255)
  
  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  plan             BillingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@unique([invoiceNumber])
  @@index([shopId])
  @@index([planId])
  @@index([status])
  @@index([dueDate])
  @@index([createdAt])
  @@map("billing_invoices")
}

model BillingEvent {
  id               String   @id @default(cuid())
  shopId           String   @map("shop_id") @db.VarChar(255)
  type             BillingEventType
  
  // Event Data
  data             Json     @default("{}")
  metadata         Json     @default("{}")
  
  // Timestamps
  occurredAt       DateTime @map("occurred_at") @db.Timestamptz
  processedAt      DateTime @default(now()) @map("processed_at") @db.Timestamptz
  
  // Relations
  plan             BillingPlan @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
  
  @@index([shopId])
  @@index([type])
  @@index([occurredAt])
  @@index([processedAt])
  @@map("billing_events")
}

// Billing Enums
enum BillingPlanType {
  revenue_share
  performance_tier
  hybrid
  usage_based
}

enum BillingPlanStatus {
  active
  inactive
  suspended
  trial
}

enum BillingCycle {
  monthly
  quarterly
  annually
}

enum InvoiceStatus {
  draft
  pending
  paid
  overdue
  cancelled
  refunded
}

enum BillingEventType {
  plan_created
  plan_updated
  metrics_calculated
  invoice_generated
  payment_received
  payment_failed
  refund_processed
  billing_suspended
  billing_reactivated
}