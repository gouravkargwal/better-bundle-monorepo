generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawOrder {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawOrder")
}

model RawProduct {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawProduct")
}

model RawCustomer {
  id           String   @id @default(cuid())
  shopId       String
  payload      Json
  extractedAt  DateTime @default(now())

  @@index([shopId])
  @@map("RawCustomer")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?
  emailVerified Boolean?
}

model Shop {
  id                 String                   @id @default(cuid())
  shopDomain         String                   @unique
  accessToken        String
  planType           String                   @default("Free")
  currencyCode       String?
  moneyFormat        String?
  isActive           Boolean                  @default(true)
  email              String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  lastAnalysisAt     DateTime?
  analysisJobs       AnalysisJob[]
  bundleAnalysis     BundleAnalysisResult[]
  heuristicDecisions HeuristicDecision[]
  incrementalLogs    IncrementalAnalysisLog[]
  orderData          OrderData[]
  productData        ProductData[]
  customerData       CustomerData[]
  analysisConfig     ShopAnalysisConfig?
  trackedSales       TrackedSale[]
  widgetConfig       WidgetConfiguration?
  widgetEvents       WidgetEvent[]
  trackingEvents     TrackingEvent[]
  shopAnalytics      ShopAnalytics?
  featureComputations FeatureComputation[]
  mlTrainingLogs      MLTrainingLog[]
  billingSubscriptions BillingSubscription[]
  billingCharges    BillingCharge[]
  userFeatures       UserFeatures[]
  productFeatures    ProductFeatures[]
  interactionFeatures InteractionFeatures[]
}

model OrderData {
  id        String   @id @default(cuid())
  shopId    String
  orderId   String
  customerId String?
  totalAmount Float
  orderDate  DateTime
  orderStatus String?
  lineItems  Json
  createdAt  DateTime @default(now())
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, orderId])
  @@index([shopId, orderDate])
  @@index([shopId, customerId])
  @@map("OrderData")
}

model ProductData {
  id        String   @id @default(cuid())
  shopId    String
  productId String
  title     String
  handle    String
  description String?
  category  String?
  vendor    String?
  price     Float
  compareAtPrice Float?
  inventory Int?
  tags      Json?
  imageUrl  String?
  imageAlt  String?
  productCreatedAt DateTime?
  variants  Json?
  metafields Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, category])
  @@index([shopId, price])
  @@index([shopId, isActive])
  @@map("ProductData")
}

model CustomerData {
  id        String   @id @default(cuid())
  shopId    String
  customerId String
  email     String?
  firstName String?
  lastName  String?
  totalSpent Float   @default(0)
  orderCount Int     @default(0)
  lastOrderDate DateTime?
  tags      Json?
  createdAtShopify DateTime?
  lastOrderId String?
  location Json?
  metafields Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, email])
  @@index([shopId, totalSpent])
  @@index([shopId, lastOrderDate])
  @@map("CustomerData")
}

model BundleAnalysisResult {
  id              String   @id @default(cuid())
  shopId          String
  productIds      String[]
  bundleSize      Int
  coPurchaseCount Int
  confidence      Float
  lift            Float
  support         Float
  revenue         Float
  avgOrderValue   Float
  analysisDate    DateTime @default(now())
  isActive        Boolean  @default(true)
  discount        Float    @default(0)
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productIds])
  @@index([shopId, confidence])
  @@index([shopId, lift])
  @@index([shopId, revenue])
  @@index([shopId, isActive])
  @@index([shopId, bundleSize])
  @@index([shopId, analysisDate])
  @@map("BundleAnalysisResult")
}

model TrackedSale {
  id               String   @id @default(cuid())
  shopId           String
  shopifyOrderId   String
  revenueGenerated Float
  commissionOwed   Float
  status           String   @default("pending")
  billingPeriod    String?
  createdAt        DateTime @default(now())
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, shopifyOrderId])
  @@index([shopId, billingPeriod])
  @@index([shopId, status])
  @@map("TrackedSale")
}

model WidgetEvent {
  id         String   @id @default(cuid())
  shopId     String
  sessionId  String
  bundleId   String?
  action     String
  productIds String[]
  timestamp  DateTime @default(now())
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, sessionId])
  @@index([shopId, action])
  @@index([shopId, timestamp])
  @@map("WidgetEvent")
}

model WidgetConfiguration {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  isEnabled             Boolean  @default(false)
  theme                 String   @default("auto")
  position              String   @default("product_page")
  title                 String   @default("Frequently Bought Together")
  showImages            Boolean  @default(true)
  showIndividualButtons Boolean  @default(true)
  showBundleTotal       Boolean  @default(true)
  globalDiscount        Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  @@map("WidgetConfiguration")
}

model AnalysisJob {
  id          String    @id @default(cuid())
  shopId      String
  status      String    @default("pending")
  jobId       String    @unique
  progress    Int       @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  result      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
  @@map("AnalysisJob")
}

model ShopAnalysisConfig {
  id               String   @id @default(cuid())
  shopId           String   @unique
  similarityConfig Json?
  bundleConfig     Json?
  isEnabled        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model HeuristicDecision {
  id                    String   @id @default(cuid())
  shopId                String
  decision              String   // Human-readable decision
  reason                String   // Detailed reasoning
  nextAnalysisHours     Int      // Next analysis interval in hours
  confidence            Float    // Confidence score (0.0 to 1.0)
  
  // Key heuristic factors as individual fields
  orderVolume           Float    // Orders per day
  revenueVelocity       Float    // Revenue per day
  bundleEffectiveness   Float    // Bundle performance score (0.0 to 1.0)
  dataChangeRate        Float    // Data change percentage
  shopActivityLevel     String   // 'low', 'medium', 'high'
  userEngagement        Float    // User engagement score (0.0 to 1.0)
  
  // Additional metadata
  reasoningSummary      String?  // Summary of reasoning
  analysisTimestamp     DateTime @default(now())
  createdAt             DateTime @default(now())
  
  // Relations
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, decision])
  @@index([shopId, createdAt])
  @@index([nextAnalysisHours])
  @@index([confidence])
  @@map("HeuristicDecision")
}

model IncrementalAnalysisLog {
  id        String   @id @default(cuid())
  shopId    String
  jobId     String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, jobId])
  @@index([shopId, action])
  @@index([shopId, createdAt])
}

// New tracking models
model TrackingEvent {
  id          String   @id @default(cuid())
  shopId      String
  eventType   String   // "recommendation_displayed", "recommendation_clicked", etc.
  sessionId   String
  trackingId  String
  userId      String?
  timestamp   DateTime
  metadata    Json
  rawEvent    Json
  createdAt   DateTime @default(now())

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])

  @@index([shopId, eventType])
  @@index([sessionId])
  @@index([trackingId])
  @@index([timestamp])
  @@index([userId])
}

model ShopAnalytics {
  id              String   @id @default(cuid())
  shopId          String   @unique
  totalOrders     Int      @default(0)
  totalRevenue    Float    @default(0)
  avgOrderValue   Float    @default(0)
  topProducts     Json?    // Top 10 products by quantity
  topCategories   Json?    // Top categories by revenue
  lastComputedAt  DateTime @default(now())
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, totalRevenue])
  @@index([shopId, totalOrders])
  @@map("ShopAnalytics")
}

// Billing models
model BillingSubscription {
  id                String   @id @default(cuid())
  shopId            String
  planName          String
  status            String   // "active", "cancelled", "declined", "frozen"
  trialDays         Int      @default(14)
  currentPeriodEnd  DateTime
  nextBillingDate   DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  charges BillingCharge[]

  @@index([shopId, status])
  @@index([status, nextBillingDate])
}

model BillingCharge {
  id            String   @id @default(cuid())
  shopId        String
  subscriptionId String
  amount        Float
  currency      String   @default("USD")
  description   String
  billingPeriod String
  status        String   // "pending", "active", "cancelled", "declined"
  createdAt     DateTime @default(now())
  dueDate       DateTime
  paidAt        DateTime?

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  subscription BillingSubscription @relation(fields: [subscriptionId], references: [id])

  @@index([shopId, status])
  @@index([subscriptionId])
  @@index([billingPeriod])
  @@index([dueDate])
}

// ML Training Logs - Simple and Clean
model MLTrainingLog {
  id          String   @id @default(cuid())
  shopId      String
  status      String   @default("started") // "started", "completed", "failed", "skipped"
  startedAt   DateTime @default(now())
  completedAt DateTime?
  durationMs  Int?     // Training duration in milliseconds
  productsCount Int    @default(0)
  usersCount   Int     @default(0)
  error       String?
  createdAt   DateTime @default(now())
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
  @@map("MLTrainingLog")
}



model FeatureComputation {
  id          String   @id @default(cuid())
  shopId      String
  jobId       String
  status      String   @default("pending") // "pending", "computing", "completed", "failed"
  featureCount Int     @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())
  completedAt DateTime?
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@map("FeatureComputation")
}

model UserFeatures {
  id                      String   @id @default(cuid())
  shopId                  String
  customerId              String
  totalPurchases          Int      @default(0)
  recencyDays             Int?
  avgPurchaseIntervalDays  Float?
  totalSpent              Float    @default(0)
  preferredCategory       String?
  lastComputedAt          DateTime @default(now())
  shop                    Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId])
  @@index([shopId, totalSpent])
  @@index([shopId, recencyDays])
  @@map("UserFeatures")
}

model ProductFeatures {
  id              String   @id @default(cuid())
  shopId          String
  productId       String
  popularity      Int      @default(0)
  avgRating       Float?
  priceTier       String?  // "low", "mid", "high"
  category        String?
  tags            Json?
  lastComputedAt  DateTime @default(now())
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, popularity])
  @@index([shopId, priceTier])
  @@index([shopId, category])
  @@map("ProductFeatures")
}

model InteractionFeatures {
  id                  String   @id @default(cuid())
  shopId              String
  customerId          String
  productId           String
  purchaseCount       Int      @default(0)
  lastPurchaseDate    DateTime?
  timeDecayedWeight   Float?
  lastComputedAt      DateTime @default(now())
  shop                Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, customerId, productId])
  @@index([shopId, customerId])
  @@index([shopId, productId])
  @@index([shopId, timeDecayedWeight])
  @@map("InteractionFeatures")
}
