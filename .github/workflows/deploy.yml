name: Deploy BetterBundle

on:
  workflow_dispatch:
    inputs:
      service:
        description: "Service to deploy"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - shopify-app
          - ml-api
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - development

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      shopify-changed: ${{ steps.changes.outputs.shopify }}
      ml-changed: ${{ steps.changes.outputs.ml }}
      should-deploy-shopify: ${{ steps.deploy-shopify.outputs.should-deploy }}
      should-deploy-ml: ${{ steps.deploy-ml.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^shopify-app/"; then
            echo "shopify=true" >> $GITHUB_OUTPUT
          else
            echo "shopify=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^ml-api/"; then
            echo "ml=true" >> $GITHUB_OUTPUT
          else
            echo "ml=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine Shopify deployment
        id: deploy-shopify
        run: |
          if [ "${{ github.event.inputs.service }}" = "all" ] || [ "${{ github.event.inputs.service }}" = "shopify-app" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changes.outputs.shopify }}" = "true" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine ML deployment
        id: deploy-ml
        run: |
          if [ "${{ github.event.inputs.service }}" = "all" ] || [ "${{ github.event.inputs.service }}" = "ml-api" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changes.outputs.ml }}" = "true" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy-shopify-app:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy-shopify == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: shopify-app/package-lock.json

      - name: Install dependencies
        working-directory: ./shopify-app
        run: npm ci

      - name: Run tests
        working-directory: ./shopify-app
        run: npm test
        env:
          NODE_ENV: test

      - name: Run linting
        working-directory: ./shopify-app
        run: npm run lint

      - name: Build application
        working-directory: ./shopify-app
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_SHOPIFY_PROJECT_ID }}
          working-directory: ./shopify-app
          vercel-args: "--prod"

      - name: Deploy to Vercel (Development)
        if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_SHOPIFY_PROJECT_ID_DEV }}
          working-directory: ./shopify-app

      - name: Run database migrations
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
        working-directory: ./shopify-app
        run: |
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Test Upstash Redis Connection
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
        working-directory: ./shopify-app
        run: |
          # Test Redis connection using Node.js
          node -e "
          const Redis = require('ioredis');
          const redis = new Redis({
            host: process.env.REDIS_HOST,
            port: process.env.REDIS_PORT,
            password: process.env.REDIS_PASSWORD,
            db: process.env.REDIS_DB || 0,
            retryDelayOnFailover: 100,
            maxRetriesPerRequest: 3
          });

          redis.ping().then(() => {
            console.log('✅ Redis connection successful');
            process.exit(0);
          }).catch(err => {
            console.error('❌ Redis connection failed:', err.message);
            process.exit(1);
          });
          "
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_DB: ${{ secrets.REDIS_DB }}

      - name: Notify Shopify deployment
        if: always()
        run: |
          echo "Shopify app deployment ${{ job.status }}"
          # You can add Slack notification here if needed

    deploy-fly-worker:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy-shopify == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: fly-worker/package-lock.json
          
      - name: Install dependencies
        working-directory: ./fly-worker
        run: npm ci
        
      - name: Run tests
        working-directory: ./fly-worker
        run: npm test
        env:
          NODE_ENV: test
          
      - name: Run linting
        working-directory: ./fly-worker
        run: npm run lint
        
      - name: Build application
        working-directory: ./fly-worker
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH
          
      - name: Deploy to Fly.io (Production)
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
        working-directory: ./fly-worker
        run: |
          flyctl auth token ${{ secrets.FLY_API_TOKEN }}
          flyctl deploy --app better-bundle-worker-prod
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          
      - name: Deploy to Fly.io (Development)
        if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
        working-directory: ./fly-worker
        run: |
          flyctl auth token ${{ secrets.FLY_API_TOKEN }}
          flyctl deploy --app better-bundle-worker-dev
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          
      - name: Test Fly.io Worker Health
        working-directory: ./fly-worker
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ secrets.FLY_WORKER_URL }}/health || exit 1
        env:
          FLY_WORKER_URL: ${{ secrets.FLY_WORKER_URL }}
          
      - name: Notify Fly.io Worker deployment
        if: always()
        run: |
          echo "Fly.io Worker deployment ${{ job.status }}"

  deploy-ml-api:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy-ml == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: ml-api/requirements.txt

      - name: Install dependencies
        working-directory: ./ml-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: ./ml-api
        run: |
          python -m pytest tests/ -v
        env:
          PYTHONPATH: .

      - name: Run linting
        working-directory: ./ml-api
        run: |
          pip install flake8 black
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .

            - name: Deploy to Railway (Production)
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
        run: |
          cd ml-api
          railway up --service better-bundle-ml-api-production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Deploy to Railway (Development)
        if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
        run: |
          cd ml-api
          railway up --service better-bundle-ml-api-development
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_DEV }}

      - name: Test Railway ML API Health
        working-directory: ./ml-api
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ secrets.ML_API_URL }}/health || exit 1
        env:
          ML_API_URL: ${{ secrets.ML_API_URL }}
          
      - name: Notify ML API deployment
        if: always()
        run: |
          echo "Railway ML API deployment ${{ job.status }}"
          # You can add Slack notification here if needed

  setup-upstash:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy-shopify == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: shopify-app/package-lock.json

      - name: Install dependencies
        working-directory: ./shopify-app
        run: npm ci

      - name: Validate Upstash Configuration
        working-directory: ./shopify-app
        run: |
          echo "🔍 Validating Upstash Redis configuration..."

          # Check if required environment variables are set
          if [ -z "${{ secrets.REDIS_HOST }}" ]; then
            echo "❌ REDIS_HOST is not set"
            exit 1
          fi

          if [ -z "${{ secrets.REDIS_PASSWORD }}" ]; then
            echo "❌ REDIS_PASSWORD is not set"
            exit 1
          fi

          echo "✅ Upstash configuration validation passed"
          echo "Host: ${{ secrets.REDIS_HOST }}"
          echo "Port: ${{ secrets.REDIS_PORT || '6379' }}"
          echo "Database: ${{ secrets.REDIS_DB || '0' }}"

      - name: Test Upstash Redis Connection
        working-directory: ./shopify-app
        run: |
          echo "🔗 Testing Upstash Redis connection..."

          # Test Redis connection using Node.js
          node -e "
          const Redis = require('ioredis');

          const redis = new Redis({
            host: process.env.REDIS_HOST,
            port: parseInt(process.env.REDIS_PORT) || 6379,
            password: process.env.REDIS_PASSWORD,
            db: parseInt(process.env.REDIS_DB) || 0,
            retryDelayOnFailover: 100,
            maxRetriesPerRequest: 3,
            connectTimeout: 10000,
            lazyConnect: true
          });

          redis.on('connect', () => {
            console.log('✅ Connected to Upstash Redis');
          });

          redis.on('error', (err) => {
            console.error('❌ Redis connection error:', err.message);
            process.exit(1);
          });

          redis.ping().then(() => {
            console.log('✅ Redis PING successful');
            return redis.set('deployment-test', 'success');
          }).then(() => {
            return redis.get('deployment-test');
          }).then((value) => {
            console.log('✅ Redis read/write test successful:', value);
            return redis.del('deployment-test');
          }).then(() => {
            console.log('✅ Redis cleanup successful');
            redis.disconnect();
            process.exit(0);
          }).catch(err => {
            console.error('❌ Redis test failed:', err.message);
            redis.disconnect();
            process.exit(1);
          });
          "
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_DB: ${{ secrets.REDIS_DB }}

      - name: Setup Queue System
        working-directory: ./shopify-app
        run: |
          echo "🚀 Setting up background job queues..."

          # Initialize queues and test job creation
          node -e "
          const { Queue } = require('bull');

          const redisConfig = {
            host: process.env.REDIS_HOST,
            port: parseInt(process.env.REDIS_PORT) || 6379,
            password: process.env.REDIS_PASSWORD,
            db: parseInt(process.env.REDIS_DB) || 0
          };

          const analysisQueue = new Queue('analysis', { redis: redisConfig });
          const mlProcessingQueue = new Queue('ml-processing', { redis: redisConfig });

          // Test queue creation
          Promise.all([
            analysisQueue.add('test-job', { test: true }),
            mlProcessingQueue.add('test-job', { test: true })
          ]).then(() => {
            console.log('✅ Queue system initialized successfully');
            return Promise.all([
              analysisQueue.clean(0, 'completed'),
              mlProcessingQueue.clean(0, 'completed')
            ]);
          }).then(() => {
            console.log('✅ Test jobs cleaned up');
            process.exit(0);
          }).catch(err => {
            console.error('❌ Queue setup failed:', err.message);
            process.exit(1);
          });
          "
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_DB: ${{ secrets.REDIS_DB }}

  deploy-summary:
    needs:
      [deploy-shopify-app, deploy-ml-api, deploy-fly-worker, setup-upstash]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-shopify-app.result }}" = "success" ]; then
            echo "✅ **Shopify App:** Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-shopify-app.result }}" = "skipped" ]; then
            echo "⏭️ **Shopify App:** Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Shopify App:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

                    if [ "${{ needs.deploy-ml-api.result }}" = "success" ]; then
            echo "✅ **ML API:** Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-ml-api.result }}" = "skipped" ]; then
            echo "⏭️ **ML API:** Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ML API:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.setup-upstash.result }}" = "success" ]; then
            echo "✅ **Upstash Redis:** Configured and tested successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.setup-upstash.result }}" = "skipped" ]; then
            echo "⏭️ **Upstash Redis:** Skipped (no Shopify app changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Upstash Redis:** Configuration failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy-fly-worker.result }}" = "success" ]; then
            echo "✅ **Fly.io Worker:** Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-fly-worker.result }}" = "skipped" ]; then
            echo "⏭️ **Fly.io Worker:** Skipped (no Shopify app changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Fly.io Worker:** Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URLs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Shopify App: ${{ secrets.SHOPIFY_APP_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- ML API: ${{ secrets.ML_API_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fly.io Worker: ${{ secrets.FLY_WORKER_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Upstash Redis: ${{ secrets.REDIS_HOST }}" >> $GITHUB_STEP_SUMMARY
