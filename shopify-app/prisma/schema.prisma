// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?
  emailVerified Boolean?
}

model Shop {
  id                 String                   @id @default(cuid())
  shopId             String                   @unique
  shopDomain         String                   @unique
  accessToken        String
  planType           String                   @default("Free")
  currencyCode       String?
  moneyFormat        String?
  isActive           Boolean                  @default(true)
  email              String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  lastAnalysisAt     DateTime?
  analysisJobs       AnalysisJob[]
  bundleAnalysis     BundleAnalysisResult[]
  heuristicDecisions HeuristicDecision[]
  incrementalLogs    IncrementalAnalysisLog[]
  orderData          OrderData[]
  productData        ProductData[]
  analysisConfig     ShopAnalysisConfig?
  trackedSales       TrackedSale[]
  widgetConfig       WidgetConfiguration?
  widgetEvents       WidgetEvent[]
  trackingEvents     TrackingEvent[]
  shopAnalytics      ShopAnalytics?
  billingSubscriptions BillingSubscription[]
  billingCharges    BillingCharge[]
}

model OrderData {
  id        String   @id @default(cuid())
  shopId    String
  orderId   String
  customerId String?
  totalAmount Float
  orderDate  DateTime
  lineItems  Json
  createdAt  DateTime @default(now())
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, orderId])
  @@index([shopId, orderDate])
  @@index([shopId, customerId])
}

model ProductData {
  id        String   @id @default(cuid())
  shopId    String
  productId String
  title     String
  handle    String
  category  String?
  price     Float
  inventory Int?
  tags      Json?
  imageUrl  String?
  imageAlt  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@index([shopId, category])
  @@index([shopId, price])
  @@index([shopId, isActive])
}

model BundleAnalysisResult {
  id              String   @id @default(cuid())
  shopId          String
  productIds      String[]
  bundleSize      Int
  coPurchaseCount Int
  confidence      Float
  lift            Float
  support         Float
  revenue         Float
  avgOrderValue   Float
  analysisDate    DateTime @default(now())
  isActive        Boolean  @default(true)
  discount        Float    @default(0)
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, productIds])
  @@index([shopId, confidence])
  @@index([shopId, lift])
  @@index([shopId, revenue])
  @@index([shopId, isActive])
  @@index([shopId, bundleSize])
  @@index([shopId, analysisDate])
}

model TrackedSale {
  id               String   @id @default(cuid())
  shopId           String
  shopifyOrderId   String
  revenueGenerated Float
  commissionOwed   Float
  status           String   @default("pending")
  billingPeriod    String?
  createdAt        DateTime @default(now())
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, shopifyOrderId])
  @@index([shopId, billingPeriod])
  @@index([shopId, status])
}

model WidgetEvent {
  id         String   @id @default(cuid())
  shopId     String
  sessionId  String
  bundleId   String?
  action     String
  productIds String[]
  timestamp  DateTime @default(now())
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, sessionId])
  @@index([shopId, action])
  @@index([shopId, timestamp])
}

model WidgetConfiguration {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  isEnabled             Boolean  @default(false)
  theme                 String   @default("auto")
  position              String   @default("product_page")
  title                 String   @default("Frequently Bought Together")
  showImages            Boolean  @default(true)
  showIndividualButtons Boolean  @default(true)
  showBundleTotal       Boolean  @default(true)
  globalDiscount        Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model AnalysisJob {
  id          String    @id @default(cuid())
  shopId      String
  status      String    @default("pending")
  jobId       String    @unique
  progress    Int       @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  result      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
}

model ShopAnalysisConfig {
  id               String   @id @default(cuid())
  shopId           String   @unique
  similarityConfig Json?
  bundleConfig     Json?
  isEnabled        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model HeuristicDecision {
  id        String   @id @default(cuid())
  shopId    String
  decision  String
  reason    String
  metadata  Json?
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, decision])
  @@index([shopId, createdAt])
}

model IncrementalAnalysisLog {
  id        String   @id @default(cuid())
  shopId    String
  jobId     String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, jobId])
  @@index([shopId, action])
  @@index([shopId, createdAt])
}

// New tracking models
model TrackingEvent {
  id          String   @id @default(cuid())
  shopId      String
  eventType   String   // "recommendation_displayed", "recommendation_clicked", etc.
  sessionId   String
  trackingId  String
  userId      String?
  timestamp   DateTime
  metadata    Json
  rawEvent    Json
  createdAt   DateTime @default(now())

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])

  @@index([shopId, eventType])
  @@index([sessionId])
  @@index([trackingId])
  @@index([timestamp])
  @@index([userId])
}

model ShopAnalytics {
  id                              String   @id @default(cuid())
  shopId                          String   @unique
  totalRecommendationsDisplayed   Int      @default(0)
  totalRecommendationsClicked     Int      @default(0)
  totalRecommendationsAddedToCart Int      @default(0)
  totalRecommendationsPurchased   Int      @default(0)
  totalRevenueAttributed          Float    @default(0)
  totalWidgetInteractions         Int      @default(0)
  lastUpdated                     DateTime @default(now())
  createdAt                       DateTime @default(now())

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
}

// Billing models
model BillingSubscription {
  id                String   @id @default(cuid())
  shopId            String
  planName          String
  status            String   // "active", "cancelled", "declined", "frozen"
  trialDays         Int      @default(14)
  currentPeriodEnd  DateTime
  nextBillingDate   DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  charges BillingCharge[]

  @@index([shopId, status])
  @@index([status, nextBillingDate])
}

model BillingCharge {
  id            String   @id @default(cuid())
  shopId        String
  subscriptionId String
  amount        Float
  currency      String   @default("USD")
  description   String
  billingPeriod String
  status        String   // "pending", "active", "cancelled", "declined"
  createdAt     DateTime @default(now())
  dueDate       DateTime
  paidAt        DateTime?

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  subscription BillingSubscription @relation(fields: [subscriptionId], references: [id])

  @@index([shopId, status])
  @@index([subscriptionId])
  @@index([billingPeriod])
  @@index([dueDate])
}
