// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client_js {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?
  emailVerified Boolean?
}

// Core shop information
model Shop {
  id              String   @id @default(cuid())
  shopId          String   @unique // Shopify shop ID
  shopDomain      String   @unique
  accessToken     String
  planType        String   @default("Free") // Free, Performance
  currencyCode    String?  // Store currency code (USD, EUR, INR, etc.)
  moneyFormat     String?  // Store money format template
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastAnalysisAt  DateTime?
  
  // Relationships
  orderData       OrderData[]
  productData     ProductData[]
  bundleAnalysis  BundleAnalysisResult[]
  trackedSales    TrackedSale[]
  widgetEvents    WidgetEvent[]
  widgetConfig    WidgetConfiguration?
  analysisJobs    AnalysisJob[]
  analysisConfig  ShopAnalysisConfig?
  heuristicDecisions HeuristicDecision[]
  incrementalLogs IncrementalAnalysisLog[]
}

// Raw order data for analysis
model OrderData {
  id          String   @id @default(cuid())
  shopId      String
  orderId     String   // Shopify order ID
  customerId  String?
  totalAmount Float
  orderDate   DateTime
  lineItems   Json     // Store product data as JSON array
  createdAt   DateTime @default(now())
  
  // Relationships
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@index([shopId, orderDate])
  @@index([shopId, customerId])
  @@unique([shopId, orderId])
}

// Product metadata cache
model ProductData {
  id          String   @id @default(cuid())
  shopId      String
  productId   String   // Shopify product ID
  title       String
  handle      String
  category    String?
  price       Float
  inventory   Int?
  tags        Json?    // Store tags as JSON array
  imageUrl    String?  // Product image URL
  imageAlt    String?  // Product image alt text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@unique([shopId, productId])
  @@index([shopId, category])
  @@index([shopId, price])
  @@index([shopId, isActive])
}

// Simplified bundle analysis results
model BundleAnalysisResult {
  id              String   @id @default(cuid())
  shopId          String
  productIds      String[] // Array of product IDs (supports 2+ products)
  bundleSize      Int      // Number of products in bundle
  coPurchaseCount Int      // How many times bought together
  confidence      Float    // How likely products are bought together
  lift            Float    // How much more likely vs random chance
  support         Float    // Percentage of orders containing all products
  revenue         Float    // Total revenue from this combination
  avgOrderValue   Float    // Average order value when bundle is bought
  analysisDate    DateTime @default(now()) // When this analysis was performed
  isActive        Boolean  @default(true)
  discount        Float    @default(0) // Individual discount for this bundle (%)
  
  // Relationships
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@index([shopId, confidence])
  @@index([shopId, lift])
  @@index([shopId, revenue])
  @@index([shopId, isActive])
  @@index([shopId, bundleSize])
  @@index([shopId, analysisDate])
  @@unique([shopId, productIds]) // Prevent duplicate bundles
}

// Track sales for commission calculation
model TrackedSale {
  id              String   @id @default(cuid())
  shopId          String
  shopifyOrderId  String   // Original Shopify order ID
  revenueGenerated Float   // Total revenue from the sale
  commissionOwed  Float    // 5% commission amount
  status          String   @default("pending") // pending, billed, disputed
  billingPeriod   String?  // "2024-01" format for easy querying
  createdAt       DateTime @default(now())
  
  // Relationships
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@unique([shopId, shopifyOrderId])
  @@index([shopId, billingPeriod])
  @@index([shopId, status])
}

// Track widget interactions for attribution
model WidgetEvent {
  id          String   @id @default(cuid())
  shopId      String
  sessionId   String   // Customer session ID
  bundleId    String?  // Reference to bundle analysis result
  action      String   // view, click, add_to_cart, purchase
  productIds  String[] // Products involved in the interaction
  timestamp   DateTime @default(now())
  
  // Relationships
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@index([shopId, sessionId])
  @@index([shopId, action])
  @@index([shopId, timestamp])
}

// Widget configuration for each shop
model WidgetConfiguration {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  isEnabled             Boolean  @default(false)
  theme                 String   @default("auto") // auto, light, dark, high_contrast
  position              String   @default("product_page") // product_page, cart_page, both
  title                 String   @default("Frequently Bought Together")
  showImages            Boolean  @default(true)
  showIndividualButtons Boolean  @default(true)
  showBundleTotal       Boolean  @default(true)
  globalDiscount        Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

// Background job tracking for analysis
model AnalysisJob {
  id          String   @id @default(cuid())
  shopId      String
  status      String   @default("pending") // pending, processing, completed, failed
  jobId       String   @unique // Bull queue job ID
  progress    Int      @default(0) // Progress percentage 0-100
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  result      Json?    // Store analysis results as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@index([shopId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
}



// Shop-specific analysis configuration
model ShopAnalysisConfig {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  similarityConfig      Json?    // Cosine similarity configuration
  bundleConfig          Json?    // Bundle analysis configuration
  isEnabled             Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

// Heuristic-based scheduling decisions
model HeuristicDecision {
  id          String   @id @default(cuid())
  shopId      String
  decision    String   // run_analysis, skip_analysis, etc.
  reason      String   // Why this decision was made
  metadata    Json?    // Additional context data
  createdAt   DateTime @default(now())
  
  // Relationships
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@index([shopId, decision])
  @@index([shopId, createdAt])
}

// Incremental analysis logs
model IncrementalAnalysisLog {
  id          String   @id @default(cuid())
  shopId      String
  jobId       String
  action      String   // data_collected, analysis_started, analysis_completed, etc.
  details     Json?    // Additional details about the action
  createdAt   DateTime @default(now())
  
  // Relationships
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@index([shopId, jobId])
  @@index([shopId, action])
  @@index([shopId, createdAt])
}
