{% comment %}
  Bundle Recommendations Block
  Displays frequently bought together products for the current product
  Theme-compatible with minimal custom styling
{% endcomment %}

{%- liquid
  assign current_product_id = product.id
  assign shop_domain = shop.domain
  assign app_bridge_url = 'https://cdn.shopify.com/shopifycloud/shopify/assets/shopify/app-bridge-3.7.9.js'
  
  comment
    Production-ready approach: Dynamic URL resolution
    The widget will automatically detect the correct API URL based on the current environment
  endcomment
  
  comment
    Method 1: Use Shopify's app configuration (recommended for production)
    This would be set in your app's configuration and accessible via Liquid
  endcomment
  comment
    We'll use dynamic URL resolution in JavaScript instead of hardcoding
  endcomment
  assign widget_api_url = shop.metafields.better_bundle.api_url | default: ''
  
  comment
    Method 2: Use JavaScript to dynamically determine the URL (fallback)
    This will be handled in the JavaScript section below
  endcomment
  
  # Get block settings with defaults
  assign widget_title = block.settings.title | default: 'Frequently Bought Together'
  assign loading_text = block.settings.loading_text | default: 'Finding perfect matches...'
  assign empty_text = block.settings.empty_text | default: 'No bundle recommendations available at the moment.'
  assign error_text = block.settings.error_text | default: 'Unable to load bundle recommendations.'
  assign show_individual_add = block.settings.show_individual_add | default: true
  assign show_bundle_total = block.settings.show_bundle_total | default: true
  assign show_product_images = block.settings.show_product_images | default: true
  assign image_size = block.settings.image_size | default: 60
  assign layout_style = block.settings.layout | default: 'horizontal'
-%}

<div class="bundle-recommendations bundle-recommendations--{{ layout_style }}" 
     data-product-id="{{ current_product_id }}"
     data-shop-domain="{{ shop_domain }}"
     data-api-url="{{ widget_api_url }}"
     data-show-individual="{{ show_individual_add }}"
     data-show-bundle="{{ show_bundle_total }}"
     data-show-images="{{ show_product_images }}"
     data-image-size="{{ image_size }}"
     style="display: none;">
  
  <div class="bundle-recommendations__container">
    <h3 class="bundle-recommendations__title">{{ widget_title }}</h3>
    
    <div class="bundle-recommendations__content" style="display: none;">
      <div class="bundle-recommendations__loading">
        <div class="bundle-recommendations__spinner"></div>
        <p>{{ loading_text }}</p>
      </div>
      
      <div class="bundle-recommendations__bundles" style="display: none;">
        <!-- Bundle content will be populated by JavaScript -->
      </div>
      
      <div class="bundle-recommendations__empty" style="display: none;">
        <p>{{ empty_text }}</p>
      </div>
      
      <div class="bundle-recommendations__error" style="display: none;">
        <p>{{ error_text }}</p>
      </div>
    </div>
  </div>
</div>

<style>
  /* Theme-integrated bundle recommendations widget */
  .bundle-recommendations {
    margin: 2rem 0;
    padding: 0;
    border: none;
    border-radius: 0;
    background: transparent;
    font-family: inherit;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .bundle-recommendations.show {
    opacity: 1;
    transform: translateY(0);
  }
  
  .bundle-recommendations__container {
    background: transparent;
    border: none;
    border-radius: 0;
    padding: 0;
    box-shadow: none;
    overflow: visible;
    position: relative;
  }
  
  .bundle-recommendations__title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 1.5rem 0;
    padding: 0;
    color: inherit;
    font-family: inherit;
    text-align: left;
    border: none;
    background: transparent;
  }
  
  /* Inherit theme colors */
  .bundle-recommendations {
    color: inherit;
  }
  
  .bundle-recommendations * {
    color: inherit;
  }
  
  .bundle-recommendations__loading {
    text-align: center;
    padding: var(--spacing-section, 2rem);
    color: var(--color-text-subdued, #6d7175);
  }
  
  .bundle-recommendations__spinner {
    width: 24px;
    height: 24px;
    border: 2px solid var(--color-border, #e1e5e9);
    border-top: 2px solid var(--color-accent, #008060);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto var(--spacing, 1rem);
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .bundle-recommendations__content {
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
  }
  
  .bundle-recommendations__bundles {
    padding: 0;
  }
  
  .bundle-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border: 1px solid #e5e5e5;
    border-radius: 6px;
    background: #ffffff;
    transition: all 0.2s ease;
    position: relative;
    margin-bottom: 1rem;
  }
  
  .bundle-item:last-child {
    margin-bottom: 0;
  }
  
  .bundle-item:hover {
    border-color: #000;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .bundle-item__image {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
    border: 1px solid #e5e5e5;
    background: #f9f9f9;
    flex-shrink: 0;
  }
  
  .bundle-item__details {
    flex: 1;
    min-width: 0;
  }
  
  .bundle-item__title {
    font-weight: 500;
    margin: 0 0 0.25rem 0;
    color: inherit;
    font-size: 0.9rem;
    line-height: 1.3;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  .bundle-item__price {
    color: inherit;
    font-size: 0.9rem;
    font-weight: 500;
    margin: 0;
  }
  
  .bundle-item__button {
    background: #000;
    color: #fff;
    border: 1px solid #000;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8rem;
    font-weight: 500;
    transition: all 0.2s ease;
    font-family: inherit;
    flex-shrink: 0;
    white-space: nowrap;
  }
  
  .bundle-item__button:hover {
    background: #333;
    border-color: #333;
  }
  
  .bundle-total {
    margin-top: 1rem;
    padding: 1rem;
    background: #f9f9f9;
    border: 1px solid #e5e5e5;
    border-radius: 6px;
    text-align: center;
    position: relative;
  }
  
  .bundle-total__price {
    font-size: 1.1rem;
    font-weight: 600;
    color: inherit;
    margin: 0 0 0.75rem 0;
  }
  
  .bundle-total__button {
    background: #000;
    color: #fff;
    border: 1px solid #000;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    margin-top: 0;
    width: 100%;
    transition: all 0.2s ease;
    font-family: inherit;
    position: relative;
  }
  
  .bundle-total__button:hover {
    background: #333;
    border-color: #333;
  }
  
  .bundle-recommendations__empty,
  .bundle-recommendations__error {
    text-align: center;
    padding: var(--spacing-section, 2rem);
    color: var(--color-text-subdued, #6d7175);
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .bundle-item {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
    }
    
    .bundle-item__image {
      width: 80px;
      height: 80px;
    }
    
    .bundle-item__button {
      width: 100%;
      max-width: 200px;
    }
  }
</style>

<script src="{{ app_bridge_url }}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const bundleWidget = document.querySelector('.bundle-recommendations');
    if (!bundleWidget) return;
    
    const productId = bundleWidget.dataset.productId;
    const shopDomain = bundleWidget.dataset.shopDomain;
    
    // Dynamic API URL resolution (production-ready)
    async function getApiUrl() {
      const currentHost = window.location.host;
      const protocol = window.location.protocol;
      const hostname = window.location.hostname;
      
      // Method 1: Try to fetch configuration from the current host
      try {
        const configUrl = `${protocol}//${currentHost}/api/config`;
        const configResponse = await fetch(configUrl);
        if (configResponse.ok) {
          const configData = await configResponse.json();
          if (configData.success && configData.config.widgetApiUrl) {
            console.log('Using dynamic API URL from config:', configData.config.widgetApiUrl);
            return configData.config.widgetApiUrl;
          }
        }
      } catch (error) {
        console.warn('Failed to fetch dynamic config, using fallback:', error);
      }
      
      // Method 2: Fallback to Liquid variable (shop metafields)
      const liquidApiUrl = bundleWidget.dataset.apiUrl;
      if (liquidApiUrl && liquidApiUrl !== '' && liquidApiUrl !== 'default') {
        console.log('Using API URL from shop metafields:', liquidApiUrl);
        return liquidApiUrl;
      }
      
      // Method 3: Environment-based fallback
      const sameHostUrl = `${protocol}//${currentHost}/api/widget`;
      
      if (hostname.includes('localhost') || hostname.includes('127.0.0.1')) {
        // Local development
        console.log('Local development detected, using same host:', sameHostUrl);
        return sameHostUrl;
      } else if (hostname.includes('myshopify.com') || hostname.includes('shopify.com')) {
        // Shopify stores - use Cloudflare tunnel for development
        const cloudflareUrl = 'https://def-undergraduate-pdf-interstate.trycloudflare.com/api/widget';
        console.log('Shopify store detected, using Cloudflare tunnel:', cloudflareUrl);
        return cloudflareUrl;
      } else {
        // Custom domains, staging, production, etc.
        // Try the same host first (most common case)
        console.log('Custom domain detected, using same host:', sameHostUrl);
        return sameHostUrl;
      }
    }
    
    // Initialize the widget with dynamic configuration
    async function initializeWidget() {
      try {
        const apiUrl = await getApiUrl();
        console.log('Widget initialized with API URL:', apiUrl);
        
        // Check if we have bundle data before showing anything
        await checkForBundleData(apiUrl);
      } catch (error) {
        console.error('Failed to initialize widget:', error);
        // Hide the entire widget on initialization error
        console.log('Widget initialization failed, hiding widget');
        bundleWidget.style.display = 'none';
      }
    }
    
    // Check for bundle data before showing the widget
    async function checkForBundleData(apiUrl) {
      try {
        console.log('Checking for bundle data...');
        const response = await fetch(`${apiUrl}?productId=${productId}&shopDomain=${shopDomain}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          console.log('API not available, hiding widget');
          bundleWidget.style.display = 'none';
          return;
        }
        
        const data = await response.json();
        console.log('API response:', data);
        
        if (data.success && data.bundle) {
          // We have bundle data, show the widget and start it
          console.log('Bundle data found, showing widget');
          bundleWidget.style.display = 'block';
          // Add a small delay for smooth animation
          setTimeout(() => {
            bundleWidget.classList.add('show');
          }, 50);
          startWidget(apiUrl);
        } else {
          // No bundle data, hide the widget completely
          console.log('No bundle data found, hiding widget');
          bundleWidget.style.display = 'none';
        }
      } catch (error) {
        console.error('Error checking for bundle data:', error);
        bundleWidget.style.display = 'none';
      }
    }
    
        function startWidget(apiUrl) {
      // Show the widget content
      const contentEl = bundleWidget.querySelector('.bundle-recommendations__content');
      const loadingEl = bundleWidget.querySelector('.bundle-recommendations__loading');
      const bundlesEl = bundleWidget.querySelector('.bundle-recommendations__bundles');
      const emptyEl = bundleWidget.querySelector('.bundle-recommendations__empty');
      const errorEl = bundleWidget.querySelector('.bundle-recommendations__error');
      
      // Show content immediately since widget is already animated
      contentEl.style.display = 'block';
    
    // Initialize Shopify App Bridge with proper configuration
    let app;
    try {
      // Check if App Bridge is loaded
      if (typeof window.createApp === 'function') {
        // In production, this would be your app's API key from Shopify Partners
        const apiKey = '{{ shop.permanent_domain | split: "." | first }}';
        const host = '{{ shop.permanent_domain }}';
        
        app = window.createApp({
          apiKey: apiKey,
          host: host,
          forceRedirect: false
        });
        
        console.log('App Bridge initialized successfully');
        
        // Get authenticated session token
        app.getSessionToken()
          .then(token => {
            return fetchBundleData(token);
          })
          .catch(error => {
            console.error('Failed to get session token:', error);
            // Fallback to direct API call
            fetchBundleData();
          });
      } else {
        console.warn('App Bridge not available, using direct API call');
        fetchBundleData();
      }
    } catch (error) {
      console.error('Failed to initialize App Bridge:', error);
      // Fallback to direct API call without authentication
      fetchBundleData();
    }
    
    function fetchBundleData(token = null) {
      const headers = {
        'Content-Type': 'application/json'
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      return fetch(`${apiUrl}?productId=${productId}&shopDomain=${shopDomain}`, {
        method: 'GET',
        headers: headers
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        loadingEl.style.display = 'none';
        
        if (data.success && data.bundle) {
          displayBundle(data.bundle);
        } else {
          // This shouldn't happen since we already checked, but hide just in case
          console.log('No bundle data in second call, hiding widget');
          bundleWidget.style.display = 'none';
        }
      })
      .catch(error => {
        console.error('Error fetching bundle recommendations:', error);
        loadingEl.style.display = 'none';
        // Hide the entire widget on error
        console.log('Error loading bundle recommendations, hiding widget');
        bundleWidget.style.display = 'none';
      });
    }
    
    function displayBundle(bundle) {
      const bundleHtml = `
        <div class="bundle-item">
          <img src="${bundle.imageUrl || '/assets/no-image.png'}" 
               alt="${bundle.imageAlt || bundle.title}" 
               class="bundle-item__image"
               loading="lazy">
          <div class="bundle-item__details">
            <h4 class="bundle-item__title">${bundle.title}</h4>
            <p class="bundle-item__price">${bundle.price}</p>
          </div>
          <button class="bundle-item__button" 
                  onclick="addToCart('${bundle.id}', '${bundle.title}')"
                  type="button">
            Add to Cart
          </button>
        </div>
        <div class="bundle-total">
          <p class="bundle-total__price">Bundle Total: ${bundle.bundlePrice}</p>
          <button class="bundle-total__button" 
                  onclick="addBundleToCart('${productId}', '${bundle.id}')"
                  type="button">
            Add Both to Cart
          </button>
        </div>
      `;
      
      bundlesEl.innerHTML = bundleHtml;
      bundlesEl.style.display = 'block';
    }
    
    }
    
    // Start the widget initialization
    initializeWidget();
  });
  
  // Add individual product to cart
  function addToCart(productId, productTitle) {
    const formData = new FormData();
    formData.append('id', productId);
    formData.append('quantity', 1);
    
    fetch('/cart/add.js', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      // Refresh cart drawer/page
      if (typeof window.refreshCart === 'function') {
        window.refreshCart();
      } else {
        window.location.reload();
      }
    })
    .catch(error => {
      console.error('Error adding to cart:', error);
    });
  }
  
  // Add bundle to cart with attribution
  function addBundleToCart(mainProductId, bundleProductId) {
    // Add main product
    const mainFormData = new FormData();
    mainFormData.append('id', mainProductId);
    mainFormData.append('quantity', 1);
    mainFormData.append('properties[_created_by]', 'BetterBundle');
    
    // Add bundle product
    const bundleFormData = new FormData();
    bundleFormData.append('id', bundleProductId);
    bundleFormData.append('quantity', 1);
    bundleFormData.append('properties[_created_by]', 'BetterBundle');
    
    // Add both products to cart
    Promise.all([
      fetch('/cart/add.js', { method: 'POST', body: mainFormData }),
      fetch('/cart/add.js', { method: 'POST', body: bundleFormData })
    ])
    .then(responses => Promise.all(responses.map(r => r.json())))
    .then(data => {
      // Refresh cart drawer/page
      if (typeof window.refreshCart === 'function') {
        window.refreshCart();
      } else {
        window.location.reload();
      }
    })
    .catch(error => {
      console.error('Error adding bundle to cart:', error);
    });
  }
</script>

{% schema %}
{
  "name": "Bundle Recommendations",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Bundle Recommendations Widget"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Widget Title",
      "default": "Frequently Bought Together",
      "info": "The title displayed above the bundle recommendations"
    },
    {
      "type": "text",
      "id": "loading_text",
      "label": "Loading Message",
      "default": "Finding perfect matches...",
      "info": "Message shown while loading bundle recommendations"
    },
    {
      "type": "text",
      "id": "empty_text",
      "label": "Empty State Message",
      "default": "No bundle recommendations available at the moment.",
      "info": "Message shown when no bundles are found"
    },
    {
      "type": "text",
      "id": "error_text",
      "label": "Error Message",
      "default": "Unable to load bundle recommendations.",
      "info": "Message shown when there's an error loading bundles"
    },
    {
      "type": "header",
      "content": "Display Options"
    },
    {
      "type": "checkbox",
      "id": "show_individual_add",
      "label": "Show Individual Add to Cart",
      "default": true,
      "info": "Show button to add bundle product individually"
    },
    {
      "type": "checkbox",
      "id": "show_bundle_total",
      "label": "Show Bundle Total",
      "default": true,
      "info": "Show combined price and add both button"
    },
    {
      "type": "checkbox",
      "id": "show_product_images",
      "label": "Show Product Images",
      "default": true,
      "info": "Display product images in bundle recommendations"
    },
    {
      "type": "range",
      "id": "image_size",
      "label": "Image Size",
      "min": 40,
      "max": 120,
      "step": 10,
      "default": 60,
      "unit": "px",
      "info": "Size of product images in the widget"
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "select",
      "id": "layout",
      "label": "Layout Style",
      "options": [
        {
          "value": "horizontal",
          "label": "Horizontal (Side by Side)"
        },
        {
          "value": "vertical",
          "label": "Vertical (Stacked)"
        }
      ],
      "default": "horizontal"
    },
    {
      "type": "header",
      "content": "Advanced"
    },
    {
      "type": "text",
      "id": "custom_css",
      "label": "Custom CSS",
      "info": "Add custom CSS to override default styling"
    }
  ]
}
{% endschema %}
