version: "3.8"

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  gorse_logs:
  gorse_cache:
  loki_data:
  grafana_data:

services:
  # ==================== REMIX APPLICATION ====================
  remix-app:
    build:
      context: ./better-bundle
      dockerfile: Dockerfile.prod
    container_name: betterbundle-remix
    ports:
      - "127.0.0.1:3000:3000"
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-betterbundle}
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9093
      - GORSE_API_URL=http://gorse:8088
      - GORSE_API_KEY=${GORSE_API_KEY}
    networks:
      - frontend
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      gorse:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,container"
    labels:
      logging: "promtail"
      service: "remix-app"

  # ==================== DATABASES ====================
  postgres:
    image: postgres:15-alpine
    container_name: betterbundle-postgres
    env_file:
      - .env.prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-betterbundle}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,container"
    labels:
      logging: "promtail"
      service: "postgres"

  redis:
    image: redis/redis-stack:7.2.0-v18
    container_name: betterbundle-redis
    env_file:
      - .env.prod
    ports:
      - "127.0.0.1:6379:6379"
      - "127.0.0.1:8002:8001"
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,container"
    labels:
      logging: "promtail"
      service: "redis"

  # ==================== KAFKA CLUSTER ====================
  kafka:
    image: bitnami/kafka:latest
    container_name: betterbundle-kafka
    env_file:
      - .env.prod
    ports:
      - "127.0.0.1:9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9094
      - KAFKA_CFG_LISTENERS=INTERNAL://:9093,EXTERNAL://:9092,CONTROLLER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=4
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_RETENTION_BYTES=1073741824
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,container"
    labels:
      logging: "promtail"
      service: "kafka"

  kafka-ui:
    container_name: betterbundle-kafka-ui
    image: provectuslabs/kafka-ui:latest
    env_file:
      - .env.prod
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: production-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      DYNAMIC_CONFIG_ENABLED: "false"
      AUTH_TYPE: "DISABLED"
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      logging: "promtail"
      service: "kafka-ui"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    env_file:
      - .env.prod
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "127.0.0.1:8082:8082"
    hostname: rest-proxy
    container_name: betterbundle-rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      logging: "promtail"
      service: "kafka-rest-proxy"

  # ==================== RECOMMENDATION ENGINE ====================
  gorse:
    image: zhenghaoz/gorse-in-one:latest
    container_name: betterbundle-gorse
    env_file:
      - .env.prod
    ports:
      - "127.0.0.1:8086:8086"
      - "127.0.0.1:8088:8088"
    environment:
      GORSE_CACHE_STORE: redis://redis:6379/0
      GORSE_DATA_STORE: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-betterbundle}?sslmode=disable
      GORSE_MASTER_HOST: 0.0.0.0
      GORSE_LOG_LEVEL: ${GORSE_LOG_LEVEL:-info}
      GORSE_API_KEY: ${GORSE_API_KEY:?GORSE_API_KEY must be set}
    command:
      - -c
      - /etc/gorse/config.toml
      - --log-path
      - /var/log/gorse/master.log
      - --cache-path
      - /var/lib/gorse/master_cache.data
    volumes:
      - ./config.toml:/etc/gorse/config.toml:ro
      - gorse_logs:/var/log/gorse
      - gorse_cache:/var/lib/gorse
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,container"
    labels:
      logging: "promtail"
      service: "gorse"

  # ==================== PYTHON WORKER ====================
  python-worker:
    build:
      context: ./python-worker
      dockerfile: Dockerfile.prod
    container_name: betterbundle-python-worker
    ports:
      - "127.0.0.1:8000:8000"
    env_file:
      - .env.prod
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      gorse:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,container"
    labels:
      logging: "promtail"
      service: "python-worker"

  # ==================== LOGGING STACK ====================
  loki:
    image: grafana/loki:3.0.0
    container_name: betterbundle-loki
    env_file:
      - .env.prod
    ports:
      - "127.0.0.1:3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_data:/loki
    networks:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3100/ready",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    user: "10001"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      logging: "promtail"
      service: "loki"

  promtail:
    image: grafana/promtail:3.0.0
    container_name: betterbundle-promtail
    env_file:
      - .env.prod
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - ./promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      loki:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
        reservations:
          cpus: "0.1"
          memory: 64M
    security_opt:
      - no-new-privileges:true
    user: "0" # Needs root to read Docker socket
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    labels:
      logging: "promtail"
      service: "promtail"

  grafana:
    image: grafana/grafana:11.0.0
    container_name: betterbundle-grafana
    env_file:
      - .env.prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD must be set}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
      - GF_FEATURE_TOGGLES_ENABLE=
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning:ro
    networks:
      - frontend
      - backend
    restart: unless-stopped
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    security_opt:
      - no-new-privileges:true
    user: "472"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      logging: "promtail"
      service: "grafana"
